---
title: "Exemption Addendum"
ubtitle: "Supporting Content for Extended Analysis of Selected Benefits and Costs of Homestead Exemptions in Illinois"
---

```{r setup, warning=FALSE, message=FALSE}
#| code-fold: TRUE


library(tidyverse)
library(ptaxsim)
library(DBI)
library(httr)
library(jsonlite)
library(glue)
library(DT)

knitr::opts_chunk$set(warning = FALSE, message = FALSE, error=TRUE)


file_path <- "C:/Users/aleaw/" 

taxyear <-c(2021)
taxyear = as.data.frame(taxyear)



source("../scripts/helper_tc_muninames.R") 

tc_muninames <- tc_muninames |> select(-tax_code_rate)

#ptaxsim_db_conn <- DBI::dbConnect(RSQLite::SQLite(), "./ptaxsim.db/ptaxsim-2023.0.0.db")

if (file.exists(file_path)){
   ptaxsim_db_conn <- DBI::dbConnect(RSQLite::SQLite(), "C:/Users/aleaw/OneDrive/Documents/PhD Fall 2021 - Spring 2022/Merriman RA/ptax/ptaxsim.db/ptaxsim-2023.0.0.db")
} else {
    ptaxsim_db_conn <- DBI::dbConnect(RSQLite::SQLite(), "./ptaxsim.db/ptaxsim-2023.0.0.db")

}


current_dir = getwd()

if (grepl("Website", current_dir)) {
  dots = "../"
} else {
  dots = "./"
}


path <- paste0(dots, "Output/ptaxsim_muni_level_2006to2023.csv")



muni_sums <- read_csv(path) %>% 
  left_join(nicknames)

# path <- paste0(dots, "Output/ptaxsim_muni_class_summaries_2006to2023.csv")

# muni_cl_sums <- read_csv(path) %>% 
#  left_join(nicknames)

class_dict <- read_csv("../Necessary_Files/class_dict_singlefamcodes.csv") %>% 
  mutate(class_code = as.character(class_code)) # change variable type to character so the join works.

ccao_loa <- read_csv("../inputs/ccao_loa.csv") %>% 
  mutate(class_code = as.character(class_code))

eq_factor = 3.0027


# get all tax codes and tax rates
tax_codes <- DBI::dbGetQuery(
    ptaxsim_db_conn, 
    glue_sql("
             SELECT DISTINCT tax_code_num, tax_code_rate
             FROM tax_code
             WHERE year = 2021
             "
             , 
             .con = ptaxsim_db_conn))

# get percent of eav that goes to a TIF:
tif_distribution <- DBI::dbGetQuery(
    ptaxsim_db_conn, 
    glue_sql("
             SELECT DISTINCT* 
             FROM tif_distribution
             WHERE year = 2021
             "
             , 
             .con = ptaxsim_db_conn)) %>%
  select(-c(tax_code_rate, agency_num))

# All PINs - get AV and exemption amounts -----------------------------
# Include ALL PINs for calculating muni level composite rates:
cook_pins <- DBI::dbGetQuery(
    ptaxsim_db_conn, 
    glue_sql("
             SELECT DISTINCT* 
             FROM pin 
             WHERE year = 2021
             "
             , 
             .con = ptaxsim_db_conn))


# create some variables that we need:
muni_rates <- cook_pins |> 
  left_join(tax_codes) |>
  left_join(tc_muninames) |>
  left_join(tif_distribution) |>
  mutate(
    tax_code_distribution_pct = ifelse(is.na(tax_code_distribution_pct), 0, tax_code_distribution_pct),
    in_tif = ifelse(tax_code_num %in% tif_distribution$tax_code_num, 1, 0),
    has_HO_exe = ifelse(exe_homeowner > 0, 1, 0),
    has_other_exe = ifelse(exe_senior + exe_freeze + exe_longtime_homeowner + exe_disabled + exe_vet_returning + exe_vet_dis_lt50 + exe_vet_dis_50_69 + exe_vet_dis_ge70 > 0, 1, 0 ),
    all_exemptions = sum(across(starts_with("exe_"))),
    final_tax_to_tif = tax_bill_total *  tax_code_distribution_pct/100,
    final_tax_to_dist = tax_bill_total-final_tax_to_tif,
    eav_inTIF = final_tax_to_tif / tax_code_rate/100,

    taxed_eav = av_clerk*eq_factor - eav_inTIF,
    total_bill = final_tax_to_tif + final_tax_to_dist

  ) %>% 
  mutate(av = av_clerk)  |> # av used for calculations is the final av value from the clerk's office
  group_by(clean_name)|>
  summarize(
    tax_bill_total = sum(tax_bill_total), # TIF and local government revenue
    eav_inTIF = sum(eav_inTIF, na.rm=T),  # should be sum of frozen EAV
    muni_taxed_eav = sum(taxed_eav, na.rm=T),  # non-TIF and non-exempt EAV taxed by government agencies
    muni_exempt_eav_from_GHE = sum(exe_homeowner, na.rm=T),
    muni_levy = sum(final_tax_to_dist, na.rm=T),
    
    muni_min_rate = min(tax_code_rate),
    muni_median_rate = median(tax_code_rate),
    muni_avg_rate = mean(tax_code_rate, na.rm=T),
    muni_max_rate = max(tax_code_rate),
    final_tax_to_dist = sum(final_tax_to_dist, na.rm=T),
    final_tax_to_tif = sum(final_tax_to_tif, na.rm=T)) |>
  mutate(muni_hyp_taxbase = muni_taxed_eav + muni_exempt_eav_from_GHE,   
         muni_hyp_taxrate =  muni_levy / muni_hyp_taxbase * 100 )
  
tax_code_change <- cook_pins |>  
  left_join(tax_codes) |>
  left_join(tc_muninames) |>
  left_join(tif_distribution) |>
  mutate(
    tax_code_distribution_pct = ifelse(is.na(tax_code_distribution_pct), 0, tax_code_distribution_pct),
    in_tif = ifelse(tax_code_num %in% tif_distribution$tax_code_num, 1, 0),
    has_HO_exe = ifelse(exe_homeowner > 0, 1, 0),
    has_other_exe = ifelse(exe_senior + exe_freeze + exe_longtime_homeowner + exe_disabled +
                             exe_vet_returning + exe_vet_dis_lt50 + exe_vet_dis_50_69 + 
                             exe_vet_dis_ge70 > 0, 1, 0 ),
    all_exemptions = sum(across(starts_with("exe_"))),
    final_tax_to_tif = tax_bill_total *  tax_code_distribution_pct/100,
    final_tax_to_dist = tax_bill_total-final_tax_to_tif,
    eav_inTIF = final_tax_to_tif / tax_code_rate/100,
    
    taxed_eav = av_clerk*eq_factor - eav_inTIF,
    total_bill = final_tax_to_tif + final_tax_to_dist
  ) %>% 
  group_by(clean_name, tax_code_num, tax_code_rate) |>
  summarize(
    tc_pc = n(),
    tc_tax_bill_total = sum(tax_bill_total), # TIF and local government revenue at tax code level
    tc_eav_inTIF = sum(eav_inTIF, na.rm=T),  # should be sum of frozen EAV
    tc_taxed_eav = sum(taxed_eav, na.rm=T),  # non-TIF and non-exempt EAV taxed by government agencies
    tc_exempt_eav_from_GHE = sum(exe_homeowner, na.rm=T),
    tc_final_tax_to_dist = sum(final_tax_to_dist, na.rm=T),
    tc_final_tax_to_tif = sum(final_tax_to_tif, na.rm=T)) |>
  mutate(tc_hyp_taxbase = tc_taxed_eav + tc_exempt_eav_from_GHE,   
         tc_hyp_taxrate =  tc_final_tax_to_dist / tc_hyp_taxbase * 100 )



# Identify Class 2 Residential PINs ------------- 
c2pins <- DBI::dbGetQuery(
  ptaxsim_db_conn, 
  glue_sql("
             SELECT DISTINCT* 
             FROM pin 
             WHERE class > 199 AND class < 300
             AND year = 2021
             "
           , 
           .con = ptaxsim_db_conn))

c2pins <- c2pins |> 
  mutate(has_HO_exe = ifelse( exe_homeowner > 0, 1, 0),
         has_other_exe = ifelse(exe_senior + exe_freeze + exe_longtime_homeowner + exe_disabled + exe_vet_returning + exe_vet_dis_lt50 + exe_vet_dis_50_69 + exe_vet_dis_ge70 > 0, 1, 0 )) %>% 
  left_join(tax_codes) |>
  left_join(tc_muninames) %>%
  mutate(av = av_clerk) |>
  left_join(tax_code_change) |>
  left_join(tif_distribution) |>
  mutate(
    tax_code_distribution_pct = ifelse(is.na(tax_code_distribution_pct), 0, tax_code_distribution_pct),
    in_tif = ifelse(tax_code_num %in% tif_distribution$tax_code_num, 1, 0),
    has_HO_exe = ifelse(exe_homeowner > 0, 1, 0),
    has_other_exe = ifelse(exe_senior + exe_freeze + exe_longtime_homeowner + exe_disabled + exe_vet_returning + exe_vet_dis_lt50 + exe_vet_dis_50_69 + exe_vet_dis_ge70 > 0, 1, 0 ),
    all_exemptions = sum(across(starts_with("exe_"))),
    final_tax_to_tif = tax_bill_total *  tax_code_distribution_pct/100,
    final_tax_to_dist = tax_bill_total-final_tax_to_tif,
    eav_inTIF = final_tax_to_tif / tax_code_rate/100,
    
    taxed_eav = av_clerk*eq_factor - eav_inTIF)
```

```{r}
#| label: medianproperty-bymuni
# #| tbl-cap: "Median AV Class 2 property by Municipality"

q = c(.1, .25, .5, .75, .9)

## ranks properties that are considered C2 properties in order of AV for each Muni
muni_quartiles <- c2pins %>%
  group_by(clean_name) %>%
  arrange(av) %>%
  summarize(count_pins = n(), 
            min = min(av),
            quant10 = round(quantile(av, probs = q[1])), 
            quant25 = round(quantile(av, probs = q[2])), 
            quant50 = round(quantile(av, probs = q[3])),
            quant75 = round(quantile(av, probs = q[4])),
            quant90 = round(quantile(av, probs = q[5])),

            max = max(av)
           ) %>% 
  arrange(desc(quant50))


# All Class 2 Properties
munis_ranked <- c2pins  %>%
  inner_join(muni_quartiles, by = c("clean_name")) %>% 
  mutate(rank = case_when(
   av > (quant10-500) & (av<quant10+500) ~ "q10",
    av > (quant25-500) & (av<quant25+500) ~ "q25",
    av > (quant50-500) & (av<quant50+500) ~ "q50",
    av > (quant75-500) & (av<quant75+500) ~ "q75",
    av > (quant90-500) & (av<quant90+500) ~ "q90")

    ) %>%
  select(clean_name, rank, av, pin, class, everything())
```

## Which taxpayers benefit the most from homestead exemptions?

### Table 1. Comparison of Tax Bills for Median Assessed Value (AV) Class 2 Properties in Selected Municpalities under the Status Quo and Alternative Scenario

Assessed Value is used to identify the quartile breaks within each municipality for single-family properties. These break points will then be used to look at how the tax bill changes for properties with AVs at the 25th percentile, 50th percentile, and 75th percentile.

The assessed value and original equalized assessed values come from the `pin` data table within PTAXSIM. This table also has every type of exemption that the property received and the amount of EAV that was exempt due to the exemption.

```{r}
#| label: tbl-taxbillchange
#| tbl-cap: "**Figure 2** The median property was found for all Class 2 properties and used to calculate the hypothetical tax bill change for those that do and do not claim the GHE. It is important to note that almost all municipalities have a median AV for those that do claim the GHE that is quite different from those that do not claim the GHE."

tax_bill_change_HO <- c2pins %>% 

  filter(av > 0) %>% 
 arrange(av) %>%
  mutate(eq_av = av_clerk*eq_factor,
         bill_current = (taxed_eav*tax_code_rate/100), # excludes tif portion
         bill_noexemps =  tc_hyp_taxrate/100*(taxed_eav+exe_homeowner),
         bill_change = bill_noexemps - bill_current) %>%
  group_by(clean_name, has_HO_exe) %>% 
  summarize(median_AV = median(av),
            median_EAV = median(taxed_eav),
            median_bill_cur = round(median(bill_current)),
            median_bill_new = round(median(bill_noexemps)),
            median_change = round(median(bill_change)),
            pincount=n(),
            perceived_savings = median(exe_homeowner*tax_code_rate/100)
  )

tax_bill_change_HO |> filter(clean_name %in% c("Park Forest", "Phoenix", "Winnetka", "Riverdale"))
```

![](images/clipboard-3760892845.png)






### Figure 1. Examples of Actual Tax Bills

**Park Forest vs. Winnetka**

![](images/clipboard-3418026779.png){width="387"}

![](images/clipboard-3189035135.png){width="392"}

### Figure 2. Value of Median Residential Property Indifferent to Elimination of GHE


```{r}

muni_breakeven_points <- cook_pins |>
  left_join(muni_rates) |>
  filter(exe_homeowner == 10000) %>% 
  filter(exe_senior == 0 & 
           exe_freeze == 0 & 
           exe_longtime_homeowner == 0 & 
           exe_disabled == 0 & 
           exe_vet_returning == 0 & 
           exe_vet_dis_lt50 == 0 & 
           exe_vet_dis_50_69 == 0 & 
           exe_vet_dis_ge70 == 0 & 
           exe_abate == 0) %>%
  #select(av, tax_code_num:all_exemptions, tax_code_rate, clean_name, final_tax_to_dist, taxed_eav) %>%
  
  group_by(clean_name) %>%
  
  summarize(
    median_AV = median(av),     # median class 2 AV for properties that did claim the GHE but not other exemptions
    bill_current = mean(taxed_eav * tax_code_rate/100), # money collected by non-TIF agencies
    
    bill_noGHE = mean(tc_hyp_taxrate/100 * (taxed_eav+exe_homeowner)), # this uses tax code tax rate
    #avg_bill_change = mean(bill_noGHE - bill_current),
    avg_current_comprate = mean(tax_code_rate/100, na.rm=T),
    avg_noGHE_comprate = mean(tc_hyp_taxrate/100, na.rm=T ),
    rate_change = mean(tax_code_rate - tc_hyp_taxrate),
 
    
    bill_change = round(mean(bill_noGHE - bill_current)),
    
    muni_avg_rate_change = mean(muni_avg_rate - muni_hyp_taxrate),
        avg_rate_change = mean(avg_current_comprate - avg_noGHE_comprate),

    #nobillchange_propertyEAV = round(mean(10000 * ((tax_code_rate/100) / (rate_change/100)))),
 #  nochange_av = round(mean(nobillchange_propertyEAV / eq_factor)),
   # ratio_av_to_breakeven = (median_AV / nochange_av) , 
   
   nobillchange_propertyEAV = round(mean(exe_homeowner * ((muni_avg_rate) / (muni_avg_rate_change)))),
    nochange_av = round(mean(nobillchange_propertyEAV / eq_factor)),
  )# %>%
 # select(clean_name, median_AV, ratio_av_to_breakeven, bill_change, nobillchange_propertyEAV,nochange_av, rate_change, avg_current_comprate, avg_noGHE_comprate,rate_change)




muni_breakeven_points %>%       
  filter(clean_name %in% c("Chicago","Park Forest", "Phoenix", "Riverdale", "Winnetka")) |>
  ggplot(aes(y=median_AV, x = clean_name)) +
  geom_col()+
    geom_text(aes(y=median_AV + 3000, label = round(median_AV) ) ) +
  scale_y_continuous(labels = scales::dollar) +
  theme_classic() +
  scale_x_discrete(label = c("Chicago","Park Forest", "Phoenix", "Riverdale", "Winnetka")) + 
  labs(y = "Median Residential AV", x = "", 
       title = "Median Residential Property Assessed Value - All Class 2 property Types")

muni_breakeven_points %>%       
  filter(clean_name %in% c("Chicago","Park Forest", "Phoenix", "Riverdale", "Winnetka")) |>
  ggplot(aes(y=(nobillchange_propertyEAV/eq_factor), x = clean_name)) +
  geom_col() +
  geom_text(aes(y=(nobillchange_propertyEAV/eq_factor) + 3000, label = round(nobillchange_propertyEAV/eq_factor)) ) +
  scale_y_continuous(labels = scales::dollar) +
  theme_classic() +
  scale_x_discrete(label = c("Chicago", "Park Forest", "Phoenix", "Riverdale", "Winnetka")) + 
  labs(y = "Breakeven Point - AV", x = "", 
  title = "Residential Property AV Breakeven Point", 
  caption = "Residential properties above these values would have their bills decrease if the GHE were eliminated
       (if they had claimed the GHE before)")
```

![](images/clipboard-1323518501.png)


```{r}
#| label: fig-breakevenToAV-notfiltered
#| column: margin
#| fig-cap: "Includes all municipalities"

nobillchange %>%
 # filter(nochange_av < 300000) %>%
  ggplot(aes(y=nochange_av, 
             x = median_AV, 
             label=clean_name
             )) +
  geom_abline(intercept = 0, slope = 1, lty = 2, alpha = .4) +
  geom_point(aes(alpha = .5)) +
 # geom_smooth(method = "lm" )+
  geom_text(aes(y = (nochange_av-5000), x = (median_AV)), size = 2)+
  theme_classic() +
  scale_x_continuous(labels = scales::dollar) +
  scale_y_continuous(labels = scales::dollar) +
  theme(legend.position = "none")+
  labs(y = " Breakeven Point", 
       x = "Median AV - Class 2 Properties in Municipality", 
      # title = "Some highly valued homes would have lower tax bills if the GHE were eliminated", 
       #caption = "The breakeven point is the assessed values at which a major class 2 
     #  property would not have their taxbill change if the GHE were eliminated."
     )
```

```{r}
#| label: fig-Figure2
#| fig-cap: "Breakeven Point ... "

nobillchange %>%
  filter(nochange_av < 300000) %>%
  ggplot(aes(y=nochange_av, 
             x = median_AV, 
             label=clean_name
             )) +
  geom_abline(intercept = 0, slope = 1, lty = 2, alpha = .4) +

  geom_point(aes(alpha = .5)) +
  
  geom_point(data = (nobillchange %>% filter(clean_name %in% c("Park Forest", "Chicago", "Winnetka", "Riverdale","Dolton"))), aes(y = nochange_av, x = median_AV, color = "red"), size = 3) +
  ggrepel::geom_label_repel(data = (nobillchange %>% filter(clean_name %in% c("Park Forest", "Chicago", "Winnetka", "Riverdale", "Dolton"))), aes(y = (nochange_av), x = (median_AV)), size = 3)+
  theme_classic() +
  theme(panel.background = element_blank()) + 
  scale_x_continuous(labels = scales::dollar, expand = c(0,0), limits = c(0,170000) ) +
  scale_y_continuous(labels = scales::dollar, expand = c(0,0), limits = c(0,170000) ) +
    theme(legend.position = "none") +

  labs(title = "Municipalities' Median AV & Breakeven Point \nClass 2 Properties Only",
    y = "Breakeven Point", 
       x = "Median AV", 
 # caption = "The breakeven point is the assessed values at which a major class 2 property would not have their taxbill change if the 
 # GHE were eliminated. Excludes outliers: University Park, Bedford Park, McCook, Hodgkins, and Rosemont. Class 2 properties that had
 # claimed the GHE would have lower taxbills even if the GHE were removed if the AV is above the breakeven point."
 ) + coord_fixed()

#ggsave("breakevenpoint.svg", bg = "transparent")
```

## How progressive are exemptions?

### Figure 3. Ratio of Tax Bills to AV for 25th and 75th Percentile AV Class 2 Properties with \$10,000 GHE


![](images/clipboard-1581842196.png) 

For the different exemption scenarios, we created new exemption variables for alternate exemption amounts that can be subtracted from a properties equalized AV.

-   ex. For `exe_neg10` all exemption amounts are equal to zero.
-   For `exe_0`, This variable should be the same as the current tax system since we did not add or remove any exempt EAV to the PIN. If the EAV for a PIN is less than 10000 EAV and they did claim the general homestead exemption, then their exempt EAV is equal to their EAV.
-   If the exempt EAV allowable for the GHE was increased to 20,000 EAV, then the variable `exe_plus10` is used.

```{r recode-exemptions}
joined_pins <- read_csv("../Output/Dont_Upload/0_joined_PIN_data_2023.csv") %>% 
  mutate(class = as.character(class))

# eq_factor <- 3.0027 # 2021
# eq_factor <- 2.9237 # 2022
eq_factor <- 3.0163 # 2023


joined_pins <- joined_pins %>% 
  left_join(class_dict, by = c("class" = "class_code")) %>%
  
  ## Create variables for alternate exemption amounts that can be subtracted from a properties equalized AV
  mutate(#eav = av_clerk*eq_factor,
    exe_neg10 = 0,
         
      # exe_0 implies no additoinal or removed EAV. Current tax system. 
         exe_0 = ifelse(eav < 10000 & exe_homeowner!=0, eav, 
                             ifelse(eav>10000 & exe_homeowner!=0, 10000, 0 )),  # no change in current exemptions
         exe_plus10 = ifelse(eav < 20000 & exe_homeowner!=0, eav, 
                             ifelse(eav>20000 & exe_homeowner!=0, 20000, 0 )),
         exe_plus20 = ifelse(eav < 30000 & exe_homeowner!=0, eav, 
                             ifelse(eav>30000 & exe_homeowner!=0, 30000, 0 ) ),
         exe_plus30 = ifelse(eav < 40000 & exe_homeowner!=0, eav, 
                             ifelse(eav>40000 & exe_homeowner!=0, 40000, 0) ),
         exe_plus40 = ifelse(eav < 50000 & exe_homeowner!=0, eav, 
                             ifelse(eav>50000 & exe_homeowner!=0, 50000, 0) ),
         mil_home = ifelse(major_class_code == 2 & av*10 > 1000000, 1, 0))


# all pins in munis fully within cook county that are some form of single-family, detached home
singfam_pins <- joined_pins %>% 
  filter(Option2 == "Single-Family")
```

```{r include = FALSE}
singfam_pins %>% filter(av > 100000) %>% summarize(count = n())
singfam_pins %>% filter(av > 300000) %>% summarize(count = n())
singfam_pins %>% filter(av > 500000) %>% summarize(count = n())


joined_pins %>% filter(major_class_code == 2 & av > 100000) %>% 
  summarize(count = n())
joined_pins %>% filter(major_class_code == 2 &av > 300000) %>% summarize(count = n())
joined_pins %>% filter(major_class_code == 2 &av > 500000) %>% summarize(count = n())
```

```{r, out.width="50%", fig.show='hold'}
joined_pins %>%
  #  filter(av < 1000000) %>% # just to see the histogram better
#  filter(av < 500000) %>% # just to see the histogram better
  filter(av < 300000) %>% # just to see the histogram better
  
  ggplot( aes(x=av)) +
  geom_histogram(bins = 50)  +
  theme_classic()+
  # coord_flip()+
  labs(title = "Cook County Class 2 Residential PIN Distribution of AV", 
       x = "Assessed Value ($)", y="# of Pins", 
       caption = "Dropped PINs with AVs over $300,000 for better visual of histogram bins.") +
  scale_x_continuous(label = scales::dollar)+
  scale_y_continuous(label = scales::comma)


singfam_pins %>%
  #  filter(av < 1000000) %>% # just to see the histogram better
#  filter(av < 500000) %>% # just to see the histogram better
  filter(av < 300000) %>% # just to see the histogram better
  
  ggplot( aes(x=av)) +
  geom_histogram(bins = 50)  +
  theme_classic()+
  # coord_flip()+
  labs(title = "Cook County Single-Family PIN Distribution of AV", 
       x = "Assessed Value ($)", y="# of Pins", 
       caption = "Dropped PINs with AVs over $300,000 for better visual of histogram bins."
       ) +
  scale_x_continuous(label = scales::dollar)+
  scale_y_continuous(label = scales::comma)
```

```{r create-muni-sing-fam-quartiles}

q = c(.10, .25, .5, .75, .9)


muni_ranked <- joined_pins %>% ## cook county single family properties rannked by AV
  filter(Option2 == "Single-Family") %>%
  arrange(av) %>%
  summarize(
    count_pins = n(), 
            min = min(av),
            quant10 = round(quantile(av, probs = q[1])), 
            quant25 = round(quantile(av, probs = q[2])), 
            quant50 = round(quantile(av, probs = q[3])),
            quant75 = round(quantile(av, probs = q[4])),
            quant90 = round(quantile(av, probs = q[5])),
            max = max(av)
           )

munis_ranked <- munis_ranked %>%
  mutate(class_1dig = substr(class, 1, 1))|>
  filter(class_1dig == 2) %>%
  inner_join(muni_quartiles, by = "clean_name") %>%
  mutate(rank = case_when(
    av > (quant10-500) & (av<quant10+500) ~ "q10",
    av > (quant25-500) & (av<quant25+500) ~ "q25",
    av > (quant50-500) & (av<quant50+500) ~ "q50",
    av > (quant75-500) & (av<quant75+500) ~ "q75",
    av > (quant90-500) & (av<quant90+500) ~ "q90",))|>
  select(clean_name, rank, av, pin, class, everything())


```

```{r scenario-calculations}

# Calculates tax rates for all exemption scenarios.
scenario_calcs <- joined_pins %>%    
  left_join(nicknames) %>%
  group_by(clean_name) %>%

    summarize(MuniLevy = sum(final_tax_to_dist, na.rm = TRUE), # amount billed by munis with current exemptions in place
            current_nonTIF_EAV_post_exemps = sum(final_tax_to_dist/(tax_code_rate/100), na.rm = TRUE),
            current_TIF_increment_EAV = sum(final_tax_to_tif/(tax_code_rate/100), na.rm=TRUE),  
            current_Exempt_EAV = sum(tax_amt_exe/(tax_code_rate/100), na.rm=TRUE), 
            current_GHE = sum(exe_homeowner, na.rm=TRUE),
            Total_EAV = sum((tax_amt_exe+final_tax_to_dist+final_tax_to_tif)/(tax_code_rate/100), na.rm = TRUE),
            exe_neg10 = sum(exe_neg10),
            exe_0 = sum(exe_0), # no change, for comparison
            exe_plus10 = sum(exe_plus10),
            exe_plus20 = sum(exe_plus20),
            exe_plus30 = sum(exe_plus30),
            exe_plus40 = sum(exe_plus40),
            mil_home = sum(mil_home)) %>%

  # remove all GHE (up to 10,000 EAV added back to base per PIN), 
  # add exe_homeowner back to taxable base
  mutate(neg10_taxable_eav = Total_EAV - current_TIF_increment_EAV - current_Exempt_EAV + current_GHE,    # adds GHE exempt EAV back to taxable base and decreases tax rates
         plus10_taxable_eav = Total_EAV - current_TIF_increment_EAV - current_Exempt_EAV + current_GHE - exe_plus10, # will increase tax rates
         plus20_taxable_eav = Total_EAV - current_TIF_increment_EAV - current_Exempt_EAV + current_GHE - exe_plus20,
         plus30_taxable_eav = Total_EAV - current_TIF_increment_EAV - current_Exempt_EAV + current_GHE - exe_plus30,
         plus40_taxable_eav = Total_EAV - current_TIF_increment_EAV - current_Exempt_EAV + current_GHE - exe_plus40,
         scenario_noexemptions_taxable_eav = Total_EAV - current_TIF_increment_EAV) %>%
  
  mutate(tr_neg10 = MuniLevy / neg10_taxable_eav,
         tr_nochange = MuniLevy / current_nonTIF_EAV_post_exemps,
         tr_plus10 = MuniLevy / plus10_taxable_eav,
         tr_plus20 = MuniLevy / plus20_taxable_eav,
         tr_plus30 = MuniLevy / plus30_taxable_eav,
         tr_plus40 = MuniLevy / plus40_taxable_eav, 
         tax_rate_current = MuniLevy/current_nonTIF_EAV_post_exemps,
         taxrate_noexemps = MuniLevy /(Total_EAV - current_TIF_increment_EAV  ),
         taxrate_noTIFs = MuniLevy / (Total_EAV - current_Exempt_EAV),
         taxrate_noTIFs_orExemps = MuniLevy / Total_EAV) %>%
  select(clean_name, MuniLevy, tr_neg10:taxrate_noTIFs_orExemps, everything())

scenario_taxrates <- scenario_calcs %>%  
  select(clean_name, MuniLevy, tr_neg10:taxrate_noTIFs_orExemps) 

scenario_taxrates
```

### Figure 4. Effect of Changing the GHE on Progressivity

**2 X 3 image of distribution for each \$10,000 increase in exemption amount** 

### Table 3. Revenue Neutral Tax Rates

**Revenue Neutral Tax Rates (Percent) for Select Municipalities as a Function of GHE Value**

### Figure 5. GHE Value and Revenue Neutral Tax Rates

**Relationship of GHE Value and Revenue Neutral Tax Rates in Chicago, Dolton, and Glencoe**

## Can we identify an optimal exemption value

### Figure 6.

**Doesn't exist, whoops!**

### Figure 7. Exemptions by Value in Class 8 Municipalities

### Figure 8. Exemption Share in Class 8 Municipalities
