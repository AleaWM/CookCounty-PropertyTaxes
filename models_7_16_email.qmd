---
title: "Models for Commercial & Industrial Properties in Cook County"
author: "MVH & AWM"
format: 
  html:
    code-fold: true
    toc: true
    toc-location: left
    tbl-cap-location: margin
    fig-cap-location: margin
    df-print: paged
---

# Preliminary Code

```{r setup}
#| output: false

options(scipen = 999, digits = 4) #no scientific notation

#format(digits = 3)


# Load packages

library(tidyverse)
library(glue)
library(DT)
library(flextable)
library(kableExtra)
library(plm)
library(modelsummary)
library(stars)
library(huxtable)
#library(jtools)
library(sandwich)

# Set table formatting defaults

set_flextable_defaults(theme_fun = theme_vanilla,
                       padding = 2,
                       #line_spacing = 1,
                       big.mark = ","
                       )

options(DT.options = list())
# 
# FitFlextableToPage <- function(ft, pgwidth = 6){
#   ft_out <- ft %>% autofit()
#   ft_out <- width(ft_out, width = dim(ft_out)$widths*pgwidth /(flextable_dim(ft_out)$widths))
#   return(ft_out)
# }

comm_ind <- read_csv("./Output/comm_ind_PINs_2011-2022_balanced.csv") 

comm_ind <- comm_ind |>
  ## set variable types 
  mutate(across(c(class, improvement_ind, has_AB_exemp, fmv_NA_indicator, in_tif), as.character))

comm_ind <- comm_ind |>
  # Change to factors; set reference levels
  mutate(incent_change = as.factor(incent_change),
         landuse_change = as.factor(landuse_change),
         triad = as.factor(Triad),
         in_tif = as.factor(in_tif)) |>
  mutate(incent_change = relevel(incent_change, ref = "Never Incentive"),
         landuse_change = relevel(landuse_change, ref = "Always Commercial"),
         triad = relevel(triad, ref = "North")) |>
  # Create binary variables
  mutate(change_incent_bin = as.factor(ifelse(incent_change == 
                                                "Changes Sometime", 1, 0)),
         change_prop_use_bin = as.factor(ifelse(landuse_change == 
                                                  "Changes Land Use", 1, 0)),
         is_chicago = as.factor(ifelse(clean_name == "Chicago", 1, 0))
         ) |>
  # Rename for my sanity
  rename(fmv_2011 = base_year_fmv_2011)

```


# OLS

## Variable of Interest: Incentive Classification Change

```{r time_filter}
#| include: false

df_2022 <- comm_ind |>
  filter(year == 2022) |>
  filter(!is.na(fmv_growth_2011))

```

### "Naive" Model

```{r naive_model}
#| tbl-cap: "Naive Model, Dependant Variable: FMV Growth, 2011-2022"

naive_ols <- lm(fmv_growth_2011 ~ incent_change + change_prop_use_bin,
                data = df_2022)

naive_ols |> summary()

```

### With Municipality Dummies

```{r}
#| label: muni_dummy
#| column: page


muni_dummy_1 <- lm(fmv_growth_2011 ~ change_incent_bin + clean_name,
                data = df_2022)

summary(muni_dummy_1)

muni_dummy_2 <- lm(fmv_growth_2011 ~ change_incent_bin + fmv_2011 + clean_name,
                data = df_2022)
summary(muni_dummy_2)

muni_dummy_3 <- lm(fmv_growth_2011 ~ change_incent_bin + fmv_2011 + triad 
                   + clean_name,
                data = df_2022)
summary(muni_dummy_3)

muni_dummy_4 <- lm(fmv_growth_2011 ~ change_incent_bin + fmv_2011 + triad 
                   + change_prop_use_bin + clean_name,
                data = df_2022)

summary(muni_dummy_4)

muni_dummy_5 <- lm(fmv_growth_2011 ~ change_incent_bin + fmv_2011 + triad 
                   + change_prop_use_bin + land_use + in_tif 
                   + clean_name,
                data = df_2022)

summary(muni_dummy_5)

muni_dummy_6 <- lm(fmv_growth_2011 ~ change_incent_bin + fmv_2011 + triad 
                   + change_prop_use_bin + land_use + in_tif 
                   + clean_name,
                data = df_2022)

summary(muni_dummy_6, digits=3)
```
### Commercial Subset

Prepare data.

```{r comm_data}

df_2022_comm <- df_2022 |>
  filter(land_use == "Commercial")

```

```{r comm_models}

comm_1 <- lm(fmv_growth_2011 ~ incent_change + clean_name,
                data = df_2022_comm)

summary(comm_1)

comm_2 <- lm(fmv_growth_2011 ~ incent_change + fmv_2011 + clean_name,
                data = df_2022_comm)

summary(comm_2)

comm_3 <- lm(fmv_growth_2011 ~ incent_change + fmv_2011 + triad 
                   + clean_name,
                data = df_2022_comm)

summary(comm_3)

comm_4 <- lm(fmv_growth_2011 ~ incent_change + fmv_2011 + triad 
                   + change_prop_use_bin + clean_name,
                data = df_2022_comm)

summary(comm_4)

comm_5 <- lm(fmv_growth_2011 ~ incent_change + fmv_2011 + triad 
                   + change_prop_use_bin + in_tif 
                   + clean_name,
                data = df_2022_comm)

summary(comm_5)

comm_6 <- lm(fmv_growth_2011 ~ incent_change + fmv_2011 + Triad 
                   + change_prop_use_bin + in_tif 
                   + clean_name,
                data = df_2022_comm)

summary(comm_6)

```

### Industrial Subset

```{r ind_data}

df_2022_ind <- df_2022 |>
  filter(land_use == "Industrial")

is.pbalanced(df_2022_ind)

```

```{r ind_models}

ind_models <- list(
  
  "(1)" = lm(fmv_growth_2011 ~ incent_change + clean_name,
                data = df_2022_ind),

  "(2)" = lm(fmv_growth_2011 ~ incent_change + fmv_2011 + clean_name,
                data = df_2022_ind),

  "(3)" = lm(fmv_growth_2011 ~ incent_change + fmv_2011 + triad 
                   + clean_name,
                data = df_2022_ind),

  "(4)" = lm(fmv_growth_2011 ~ incent_change + fmv_2011 + triad 
                   + change_prop_use_bin + clean_name,
                data = df_2022_ind),

  "(5)" = lm(fmv_growth_2011 ~ incent_change + fmv_2011 + triad 
                   + change_prop_use_bin + in_tif 
                   + clean_name,
                data = df_2022_ind)
                    
  )

ind_coef_map <- c(#'(Intercept)' = 'Constant',
                  #'incent_changeAlways Incentive' = 'Incentive (Always)',
                  'incent_changeChanges Sometime' = 'Changed Incentive',
                  'change_prop_use_bin1' = 'Changed Prop. Use',
                  'fmv_2011' = 'Base FMV (2011)',
                  'in_tif1' = 'TIF',
                  'triadCity' = 'City Triad',
                  'triadSouth' = "South Triad",
                  'triadNorth' = 'North Triad'
                  )

fit_format <- function(x) format(round(x, 3), big.mark=",")

fit <- list(
  list("raw" = "nobs", "clean" = "N", "fmt" = fit_format),
  list("raw" = "df", "clean" = "DF", "fmt" = fit_format),
  list("raw" = "adj.r.squared", "clean" = "R2 Adj.", "fmt" = fit_format),
  list("raw" = "F", "clean" = "F-stat.", "fmt" = fit_format),
  list("raw" = "p.value", "clean" = "p-value", "fmt" = fit_format)
)

ind_summ <- modelsummary(ind_models,
                         title = '<i><b>I am one hell of a thirsty table.<b><i>',
             fmt = function(x) round(x, 2),
             stars = TRUE,
             coef_omit = 'clean_name',
             coef_map = ind_coef_map,
             gof_map = fit,
             notes = 'All models include municipality-level control variables.'
             )

ind_summ

```

```{r ind_comm_dummy_reg}

test <- lm(fmv_growth_2011 ~ incent_change + fmv_2011 + Triad 
                   + change_prop_use_bin + in_tif 
                   + clean_name,
                data = df_2022_ind)

test2 <- lm(fmv_growth_2011 ~ incent_change + fmv_2011 + Triad 
                   + change_prop_use_bin + clean_name,
                data = df_2022_ind)

summary(test)

test_stats <- modelsummary::gof_map

glance(test2)

```
