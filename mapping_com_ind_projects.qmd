---
title: "Mapping C&I Projects"
format: 
  html:
    toc: true
    toc-location: left
    fig-cap-location: margin
    tbl-cap-location: margin
---

```{r}
#| output: false
#| code-fold: false

library(tidyverse)
library(sf)
library(DBI)
library(ptaxsim)
library(ggplot2)

```

Open ptaxsim.db connection; read in pin file of year interested in (`0_joined_PIN_data_2022.csv`).

```{r}

ptaxsim_db_conn <- DBI::dbConnect(RSQLite::SQLite(), "./ptaxsim.db/ptaxsim-2023.0.0.db")

# ptax_pins <- read_csv("./Output/Dont_Upload/0_joined_PIN_data_2022.csv") %>% 
#   mutate(class = as.numeric(class))

comm_ind <- read_csv("Output/comm_ind_PINs_2011to2022_timeseries.csv") %>% 
  filter(year == 2022)


# we use buyer name and sale doc for creating groups in later chunks
# sales <- read_csv("../../dissertation/data/raw/Assessor_Parcel_Sales_20250105.csv") %>% 
#  # "./inputs/Assessor_-_Parcel_Sales_20250704.csv") %>%
#   filter(class > 399 & class < 900) %>%
#   mutate(major_class = str_sub(class, 1, 1),
#             pin10 = str_sub(pin,1,10)) |>
#   mutate(incent_prop = ifelse(as.numeric(class) > 599, 1, 0)    # 900 level properties already excluded above
#          )

#keypins <- readxl::read_xlsx("Output/project_check_AWMmanualcheck.xlsx")

keypins <- readxl::read_xlsx("Output/project_check2.xlsx") |>
  mutate(keypin = ifelse(is.na(keypin), as.character(pin), as.character(keypin)) ) 


```


```{r}

# 
# pins_sold <- sales %>% 
#   group_by(pin10) %>% 
#   arrange(desc(year)) %>%
#   summarize(#pin = first(pin),
#             pin10 = first(pin10),
#             class_current = first(class),
#             sale_document_num= first(sale_document_num),
#             sale_buyer_name = first(sale_buyer_name), 
#             num_parcels_sale = first(num_parcels_sale)) |>
#   mutate(incent_prop = ifelse(as.numeric(class_current) > 599, 1, 0))

```

```{r}
#| label: read-BOR-data
#| eval: false

bor <- read_csv("Output/borappeals.csv") %>%
  mutate(project_appellant = paste(project_id, sep = "-", appellant),
         pin10 = str_sub(pin,1,10)) 


bor_pins <- bor %>% 
  group_by(pin) %>% 
  arrange(desc(tax_year)) %>%
  summarize(pin = first(pin),
            pin10 = first(pin10),
            class_current = first(class),
            class_bor = list(class),
            appellant = first(appellant),
            project_id = first(project_id), 
            tax_year_appealed = list(tax_year),
            timesappealed = n() ) %>%
  mutate(proj_appeallant = paste(project_id, "-", appellant)) |>
  mutate(incent_prop = ifelse(as.numeric(class_current) > 599, 1, 0))
```


# Mapping Areas

## Berwyn

```{r}
#| label: fig-touchingpins
#| fig-cap: "Loop creates `group` id for connected parcels. Mapped by if a parcel is touching another parcel. Simply touching another parcel is not how we want to create project IDs, but it does allow a quick visualization to see if there are PINs nested inside of other PINs which would indicate a larger project shared by the same owner. **This mapping method is mostly just a stepping stone for comparison.**"

twnshp_test <- comm_ind %>% 
  filter(Township == "Berwyn") %>%
  mutate(pin10 = str_sub(pin, 1, 10))

pins_geo <- lookup_pin10_geometry(year = 2022, 
                                        pin10 = twnshp_test$pin10) %>%
  st_as_sf(wkt = "geometry", crs = 4326)

points <- st_as_sf(pins_geo, coords = c("longitude", "latitude"), crs = 4326)

parcels <- st_as_sf(pins_geo, wkt = "geometry", crs = 4326)

invalid_geom <- st_is_valid(parcels)
table(invalid_geom)
parcels$geometry <- st_make_valid(parcels$geometry)

# Filter out invalid geometries
parcels <- parcels[st_is_valid(parcels), ]

neighbors <- st_touches(parcels)
parcels$group <- rep(NA, nrow(parcels))

group_id <- 1  # Start with the first group ID

# Loop over each parcel
for (i in seq_along(neighbors)) {
  if (is.na(parcels$group[i])) {  # If the parcel hasn't been assigned to a group yet
    
    # Start a list of parcels to visit (start with the current parcel)
    to_visit <- i
    
    # Use BFS/DFS to explore connected parcels and assign the same group ID
    while (length(to_visit) > 0) {
      current <- to_visit[1]  # Get the first parcel to visit
      to_visit <- to_visit[-1]  # Remove it from the list
      
      if (is.na(parcels$group[current])) {  # If the parcel hasn't been visited
        parcels$group[current] <- group_id  # Assign the current group ID
        
        # Add its neighbors (parcels it touches) to the list of parcels to visit
        to_visit <- c(to_visit, neighbors[[current]])
      }
    }
    
    # Increment the group ID for the next group of connected parcels
    group_id <- group_id + 1
  }
}



## Commercial Properties in Berwyn
ggplot(parcels) +
  geom_sf(aes()) +
  theme_minimal() + theme(legend.position = "none")

```


### Commercial valuation keypins

```{r}
#| label: fig-muni1-keypin
#| fig-cap: "Mapped by Commercial valuation keypin"
#| layout-ncol: 2

parcel_comparison <- left_join(parcels, keypins) %>% 
  select(group, pin10, keypin, everything()) 


parcel_comparison %>% 
  as.data.frame() |>
  group_by(keypin) %>%
  summarize(pins_ingroup = n()) |>
  arrange(desc(pins_ingroup))


parcel_comparison %>% 
  group_by(keypin) %>%
  mutate(pins_ingroup = n()) %>%
  ggplot() +
  geom_sf(aes(fill = as.factor(keypin))) +
  theme_minimal() + 
  scale_fill_discrete(na.value = "white") + 
  theme(legend.position = "none")
```


```{r}
#| label: fig-muni1-keypin-checked
#| fig-cap: "Mapped by Commercial valuation keypin"
#| layout-ncol: 2


keypins_checked <- readxl::read_xlsx("Output/projects_berwyn_checked.xlsx") |>
    mutate(pin10 = str_pad(pin10, 10, "left", "0"),
         pin = str_pad(pin, 14, "left", "0"),
         keypin = str_pad(keypin, 14, side = "left", pad = "0"))

parcel_comparison2 <- left_join(parcels, keypins_checked, by = "pin10") %>% 
  select(pin10, keypin, everything()) 


parcel_comparison2 %>% 
  as.data.frame() |>
  group_by(keypin) %>%
  summarize(pins_ingroup = n()) |>
  arrange(desc(pins_ingroup))


parcel_comparison2 %>% 
  group_by(keypin) %>%
  mutate(pins_ingroup = n()) %>%
  ggplot() +
  geom_sf(aes(fill = as.factor(keypin))) +
  theme_minimal() + 
  scale_fill_discrete(na.value = "white") + 
  theme(legend.position = "none")
```

### By Sale document number


```{r}
#| label: fig-saledocuments
#| fig-cap: "Grouped by Sale Document Number."
#| layout-ncol: 2

# parcel_comparison <- left_join(parcels, pins_sold, by = "pin10") %>% 
#   select(group, pin10, everything())

parcel_comparison %>% 
  group_by(sale_document_num) %>%
  summarize(pins_ingroup = n(), 
            incent_pins = sum(incent_prop==1, na.rm=TRUE)) |>
  arrange(desc(incent_pins), desc(pins_ingroup))

parcel_comparison %>% 
  group_by(sale_document_num) %>%
  ggplot() +
  geom_sf(aes(fill = sale_document_num, )) +
  scale_fill_continuous(na.value = "white")+
  theme_void() + 
  theme(legend.position = "none")
```

```{r}
#| label: fig-saledocandtouches
#| fig-cap: "Default group is from saledocument. If missing sale document id, then the ID uses the group variable for if a PIN touches other PINs. Color fill uses the created ID."
#| eval: false
#| include: false

parcel_comparison %>% 
  group_by(sale_document_num, group) %>%
  mutate(pins_ingroup = n(),
         id = ifelse(is.na(sale_document_num), as.character(group), paste(sale_document_num, "_", group))) %>%
  filter(pins_ingroup > 1) %>%
  ggplot() +
  geom_sf(aes(fill = id)) +
  theme_minimal() + theme(legend.position = "none")
```


### By Buyer Name

```{r}
#| label: fig-buyernames
#| fig-cap: "Brings in buyer names from sales data. Fill color based on Buyer Name"
#| layout-ncol: 2

parcel_comparison %>% 
  as.data.frame() |>
  group_by(sale_buyer_name) %>%
  summarize(pins_ingroup = n(), 
            incent_pins = sum(incent_prop==1)) |>
  arrange(desc(pins_ingroup))

parcel_comparison %>% 
  group_by(sale_buyer_name) %>%
  ggplot() +
  geom_sf(aes(fill = sale_buyer_name)) +
    scale_fill_discrete(na.value = "white")+

  theme_void() + 
  theme(legend.position = "none")
```


### Board of Review

```{r}
#| label: fig-Berwyn-appellantname
#| fig-cap: "Mapped by Board of Review Appellant name."
#| layout-ncol: 2

# 
# parcel_comparison <- left_join(parcels, bor_pins) %>% 
#   select(group, pin10, appellant, everything()) 
write_csv(parcel_comparison, "Output/projects_berwyn.csv")

parcel_comparison %>% 
  as.data.frame() |>
  group_by(appellant) %>%
  summarize(pins_ingroup = n(), 
            incent_pins = sum(incent_prop==1))

parcel_comparison %>% 
  group_by(appellant) %>%
  mutate(pins_ingroup = n()) %>%
  ggplot() +
  geom_sf(aes(fill = as.factor(appellant))) +
  theme_minimal() + 
  scale_fill_discrete(na.value = "white") + 
  theme(legend.position = "none")

```

There are `r paste(parcel_comparison %>% group_by(appellant) %>% summarize(pins_ingroup = n()) |> filter(pins_ingroup > 1) |> n_distinct())` projects with more than 1 pin in them and  `r paste(parcel_comparison %>% group_by(appellant) %>% summarize(pins_ingroup = n()) |> n_distinct())` projects overall based on appeals data.



## Elk Grove


```{r}
#| label: fig-touchespin-elkgrove
#| fig-cap: "All commercial properties in Elk Grove"


twnshp_test <- comm_ind %>% 
  filter(clean_name == "Elk Grove Village") %>%
  mutate(pin10 = str_sub(pin, 1, 10))

pins_geo <- lookup_pin10_geometry(year = 2022, 
                                        pin10 = twnshp_test$pin10) %>%
  st_as_sf(wkt = "geometry", crs = 4326)

points <- st_as_sf(pins_geo, coords = c("longitude", "latitude"), crs = 4326)

parcels <- st_as_sf(pins_geo, wkt = "geometry", crs = 4326)

invalid_geom <- st_is_valid(parcels)
table(invalid_geom)
parcels$geometry <- st_make_valid(parcels$geometry)

# Filter out invalid geometries
parcels <- parcels[st_is_valid(parcels), ]

neighbors <- st_touches(parcels)
parcels$group <- rep(NA, nrow(parcels))

group_id <- 1  # Start with the first group ID

# Loop over each parcel
for (i in seq_along(neighbors)) {
  if (is.na(parcels$group[i])) {  # If the parcel hasn't been assigned to a group yet
    
    # Start a list of parcels to visit (start with the current parcel)
    to_visit <- i
    
    # Use BFS/DFS to explore connected parcels and assign the same group ID
    while (length(to_visit) > 0) {
      current <- to_visit[1]  # Get the first parcel to visit
      to_visit <- to_visit[-1]  # Remove it from the list
      
      if (is.na(parcels$group[current])) {  # If the parcel hasn't been visited
        parcels$group[current] <- group_id  # Assign the current group ID
        
        # Add its neighbors (parcels it touches) to the list of parcels to visit
        to_visit <- c(to_visit, neighbors[[current]])
      }
    }
    
    # Increment the group ID for the next group of connected parcels
    group_id <- group_id + 1
  }
}

library(ggplot2)

## Commercial Properties in Elk Grove Village
ggplot(parcels) +
  geom_sf(aes()) +
  theme_minimal() + theme(legend.position = "none")

```


### Commercial valuation keypins

```{r}
#| label: fig-muni2-keypin
#| fig-cap: "Mapped by Commercial valuation keypin"
#| layout-ncol: 2

parcel_comparison <- left_join(parcels, keypins) %>% 
  select(group, pin10, keypin, everything()) 


parcel_comparison %>% 
  as.data.frame() |>
  group_by(keypin) %>%
  summarize(pins_ingroup = n()) |>
  arrange(desc(pins_ingroup))


parcel_comparison %>% 
  group_by(keypin) %>%
  mutate(pins_ingroup = n()) %>%
  ggplot() +
  geom_sf(aes(fill = as.factor(keypin))) +
  theme_minimal() + 
  scale_fill_discrete(na.value = "white") + 
  theme(legend.position = "none")
```


```{r}
#| label: fig-muni2-checkedprojects
#| fig-cap: "Mapped by Commercial valuation keypin"
#| layout-ncol: 2

keypins_checked <- readxl::read_xlsx("Output/projects_elkgrove_checked.xlsx") |>
  mutate(pin10 = str_pad(pin10, 10, "left", "0"),
         pin = str_pad(pin, 14, "left", "0"),
         keypin = str_pad(keypin, 14, side = "left", pad = "0"))
parcel_comparison2 <- left_join(parcels, keypins_checked, by = "pin10") %>% 
  select(pin10, keypin, everything()) 


parcel_comparison2 %>% 
  as.data.frame() |>
  group_by(keypin) %>%
  summarize(pins_ingroup = n()) |>
  arrange(desc(pins_ingroup))


parcel_comparison2 %>% 
  group_by(keypin) %>%
  mutate(pins_ingroup = n()) %>%
  ggplot() +
  geom_sf(aes(fill = as.factor(keypin))) +
  theme_minimal() + 
  scale_fill_discrete(na.value = "white") + 
  theme(legend.position = "none")
```


### BOR Appeals IDs


```{r}
#| label: fig-elkgrove-appellantname
#| fig-cap: "Elk Grove mapped by Board of Review Appellant name."
#| layout-ncol: 2

# 
# parcel_comparison <- left_join(parcels, bor_pins) %>%
#   select(group, pin10, appellant, everything())


parcel_comparison |>
  as.data.frame() |>
  group_by(appellant) %>%
  summarize(pins_ingroup = n(),
            incent_pins = sum(incent_prop == 1, na.rm=TRUE)) |> 
  arrange(desc(incent_pins), desc(pins_ingroup)) 

parcel_comparison %>% 
  group_by(appellant) %>%
  ggplot() +
  geom_sf(aes(fill = as.factor(appellant))) +
  theme_minimal() + 
  scale_fill_discrete(na.value = "white") + 
  theme(legend.position = "none")

```

There are `r paste(parcel_comparison %>% group_by(appellant) %>% summarize(pins_ingroup = n()) |> filter(pins_ingroup > 1) |> n_distinct())` projects with more than 1 pin in them and  `r paste(parcel_comparison %>% group_by(appellant) %>% summarize(pins_ingroup = n()) |> n_distinct())` projects overall based on appeals data.


### By Buyer Name from Sales Data


```{r}
#| label: fig-elkgrove-buyername
#| fig-cap: "Elk Grove mapped by Buyer's name."
#| layout-ncol: 2

# parcel_comparison <- left_join(parcels, sales, by = "pin10") %>% 
  # select(group, pin10, everything())



parcel_comparison  |>
  as.data.frame() |>
  group_by(sale_buyer_name) %>%
  summarize(pins_ingroup = n(),
            incent_pins = sum(incent_prop == 1)) |>
  arrange(desc(incent_pins), desc(pins_ingroup))

parcel_comparison %>% 
  group_by(sale_buyer_name) %>%
  ggplot() +
  geom_sf(aes(fill = sale_buyer_name)) +
  scale_fill_discrete(na.value = "white" ) + 
  theme_minimal() + theme(legend.position = "none")
```

There are `r paste(parcel_comparison %>% group_by(sale_buyer_name) %>% summarize(pins_ingroup = n()) |> filter(pins_ingroup > 1) |> n_distinct())` projects with more than 1 pin in them and  `r paste(parcel_comparison %>% group_by(sale_buyer_name) %>% summarize(pins_ingroup = n()) |> n_distinct())` projects overall based on sales data.



### By Sale Document Number 

```{r}
#| label: fig-elkgrove-documentnum
#| fig-cap: "Elk Grove mapped by sale document."
#| layout-ncol: 2

parcel_comparison |>
  as.data.frame() |>
  group_by(sale_document_num) %>%
  summarize(pins_ingroup = n() )

parcel_comparison %>% 
  group_by(sale_document_num) %>%
  ggplot() +
  geom_sf(aes(fill = sale_document_num)) +
  scale_fill_continuous(na.value = "white" ) + 
  theme_minimal() + theme(legend.position = "none")

write_csv(parcel_comparison, "Output/projects_elkgrove.csv")

```

