---
title: "Agency Funds"
format: 
  html:
    code-fold: true
    toc: true
    toc-location: left
    tbl-cap-location: margin
    fig-cap-location: margin
    df-print: paged
---


```{r warning = FALSE, message = FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
options(scipen=999)

library(tidyverse)
library(ptaxsim)
library(DBI)
library(data.table)
```

# Data Collection

## PTAXSIM Part

```{r}
# #| eval: false

ptaxsim_db_conn <- DBI::dbConnect(RSQLite::SQLite(),
  "./ptaxsim.db/ptaxsim-2023.0.0.db")

taxcodes <- DBI::dbGetQuery(
  ptaxsim_db_conn,
  "SELECT *
  FROM tax_code
  "
  )

agency_info <- DBI::dbGetQuery(
  ptaxsim_db_conn,
  "SELECT *
  FROM agency
  "
  )

agency_fund <- DBI::dbGetQuery(
  ptaxsim_db_conn,
  "SELECT *
  FROM agency_fund
  "
  )


agency_names <- DBI::dbGetQuery(
  ptaxsim_db_conn,
  "SELECT DISTINCT *
  FROM agency_info
  "
  )


agency_fund_info <- DBI::dbGetQuery(
  ptaxsim_db_conn,
  "SELECT *
  FROM agency_fund_info
  "
  )

agency_funds <- left_join(agency_fund, agency_fund_info)

agency_funds <- left_join(agency_funds, agency_names)

is.integer64 <- function(x){
  class(x)=="integer64"
}

agency_funds <- agency_funds %>%
  mutate_if(is.integer64, as.integer)

#agency_funds |> write_csv("agency_funds.csv")

```

## PTAXSIM Fund Data: Rate Change from Levy Adjustment

```{r}
agency_funds |> filter(fund_num==408) |>
  select(year, agency_name_short, final_levy, final_rate, fund_num) |>
  arrange(desc(final_rate))

agency_funds |> filter(fund_num==408) |>
  select(year, agency_name_short, final_levy, final_rate, fund_num, major_type) |>
  arrange(desc(final_rate)) |>
  ggplot() + 
  geom_line(aes(x=year, y=final_rate, group=agency_name_short, color = major_type, alpha = .3))

agency_funds |> filter(fund_num==408) |>
  select(year, agency_name_short, final_levy, final_rate, fund_num, major_type) |>
  arrange(desc(final_rate)) |>
  ggplot() + geom_line(aes(x=year, y=final_levy, group=agency_name_short, alpha = .4, color = major_type))+
    labs(title = "Levy amount from Fund 408.\nAll Agencies with Fund 408")


agency_funds |> filter(fund_num==408 & final_levy < 2000000) |>
  select(year, agency_name_short, final_levy, final_rate, fund_num, major_type) |>
  arrange(desc(final_rate)) |>
  ggplot() + 
  geom_line(aes(x=year, y=final_levy, group=agency_name_short, alpha = .4, color = major_type)) +
  labs(title = "Levy amount from Fund 408.", subtitle = "Excludes largest agency amounts")
```


```{r}
agency_fund408_sums <- agency_funds |> 
  group_by(year, agency_num, agency_name, major_type, minor_type) |>
  mutate(fund408 = ifelse(fund_num == 408, final_levy, 0),
         not_recap = ifelse(fund_num != 408, final_levy, 0) ) |>
  summarize(across(c(levy, final_levy, final_rate, fund408, not_recap), sum, na.rm=TRUE))

agency_fund408_sums |> 
  filter(year > 2019) |>
  mutate(recap_levyshare = fund408/final_levy,
         recap_revratio = fund408/not_recap) |>
  ggplot() + 
  geom_line(aes(x=year, y=recap_levyshare, group=agency_name, alpha = .4, color = major_type)) +
  labs(title = "Recapture / Total Levy")

agency_fund408_sums |> 
    filter(year > 2019) |>
  mutate(recap_levyshare = fund408/final_levy,
         recap_revratio = fund408/not_recap) |>
  ggplot() + 
  geom_line(aes(x=year, y=recap_revratio, group=agency_name, alpha = .4, color = major_type)) +
  labs(title = "Recapture / Non-Recapture Levy")



# after summing to taxing agency level, join the levy back in.
agency_fund408_sums <- left_join(agency_fund408_sums, agency_info, by = c("year", "agency_num"))
```

```{r}
#agency_funds <- read_csv("agency_funds.csv")

#agency_funds <- agency_funds |> filter(year > 2020)
agency_fund408_sums

```


## PTAB Documents

The **Levy Adjustment** Files exist for 4 years. They use the refund amounts from the previous year to calculate how much to add to Fund 408 for the tax year in the file. 

These are the files that Merriman wants us to fill in the non-eligible agencies' information. 

For example, Levy Adjustment 2021 shows the amount that was refunded in 2020. 
`ptab_refunds` from these files represent the recaptured funds from eligible agencies (if they did not waive their right to recapture the funds) that they had to give back the previous tax year due to successful PTAB appeals.

All observations' `aggregate_refund` amounts equal their `levy_adjustment` values. 

```{r}
#| tbl-cap: "`adjust_all` has all levy adjustments from the new recapture legislation since 2021. Variables labeled with `refund` represent the amount that was recaptured due to refunds for eligible taxing agencies"


# year = Tax Year. Date in file name is from agency creation of file or reception of file date.
adjust2021 <- readxl::read_xlsx("PTAB/Levy Adjustment 2021 for PA 102-0519 CORRECTED.xlsx") |>
  mutate(year = 2021) |>
  select(year, 
         agency_number = Agency,
         agency_name = `Agency Name`,
         adjust_eligible = `Adjustment Eligibility`,
         lastyear_rate = `2020 Rate`,
         lastyear_levy = `2020 Total Tax`,
         total_ptab_refunds = `Total SPO/PTAB Refunds\r\nCORRECTED\r\n(Mar 23, 2022)`,
          # `Total SPO/PTAB Refunds CORRECTED (Mar 23, 2022)`,
         total_coe_refunds = `Total Certificate of Error Refunds\r\nCORRECTED\r\n(Mar 23, 2022)`,
           #`Total Certificate of Error Refunds CORRECTED (Mar 23, 2022)`,
         aggregate_refunds = `Aggregate Refunds\r\nCORRECTED\r\n(Mar 23, 2022)`,
           #`Aggregate Refunds CORRECTED (Mar 23, 2022)`,
         levy_adjustment = `2021 Prior Year Levy Adjustment CORRECTED\r\n(Mar 23, 2022)`
           #`2021 Prior Year Levy Adjustment CORRECTED (Mar 23, 2022`
         
         ) 
  

adjust2022 <- readxl::read_xlsx("PTAB/Levy Adjustment 2022 for PA 102-0519.xlsx") |>
  mutate(year = 2022) |>
    select(year, 
         agency_number = Agency,
         agency_name = `Agency Name`, 
         adjust_eligible = `Adjustment Eligibility`,
         lastyear_rate = `2021 Rate`,
         lastyear_levy = `2021 Total Tax`,
         total_ptab_refunds = `Total SPO/PTAB Refunds`,
         total_coe_refunds = `Total Certificate of Error Refunds`,
         aggregate_refunds = `Aggregate Refunds`,
         levy_adjustment = `2022 Prior Year Levy Adjustment\r\n(Fund 408)`
         ) 

adjust2023 <- readxl::read_xlsx("PTAB/Levy Adjustment 2023 for PA 102-0519.xlsx") |>
  mutate(year = 2023) |>
      select(year, 
         agency_number = Agency,
         agency_name = `Agency Name`, 
        adjust_eligible = `Adjustment Eligibility`,
         lastyear_rate = `2022 Rate`,
         lastyear_levy = `2022 Total Tax`,
         total_ptab_refunds = `Total SPO/PTAB Refunds`,
         total_coe_refunds = `Total Certificate of Error Refunds`,
         aggregate_refunds = `Aggregate Refunds`,
         levy_adjustment = `2023 Prior Year Levy Adjustment\r\n(Fund 408)`
         )

adjust2024 <- readxl::read_xlsx("PTAB/Levy Adjustment 2024 for PA 102-0519.xlsx") |>
  mutate(year = 2024) |>
      select(year, 
         agency_number = Agency,
         agency_name = `Agency Name`, 
        adjust_eligible = `Adjustment Eligibility`,
         lastyear_rate = `2023 Rate`,
         lastyear_levy = `2023 Total Tax`,
         total_ptab_refunds = `Total SPO/PTAB Refunds`,
         total_coe_refunds = `Total Certificate of Error Refunds`,
         aggregate_refunds = `Aggregate Refunds`,
         levy_adjustment = `2024 Prior Year Levy Adjustment\r\n(Fund 408)`
         )

# We don't need to include 2024

adjust_all <- rbind(adjust2021, adjust2022, adjust2023, adjust2024
                    ) |>
  mutate(levy_adjustment = as.numeric(levy_adjustment)) |>
  mutate(across(.cols=c(lastyear_levy:levy_adjustment), round, digits = 0)) |>
  # exclude the rows that had Totals in them (using their missing agency numbers)
  filter(!is.na(agency_number) # &
           # ((total_ptab_refunds!=0 & !is.na(total_ptab_refunds)) | # keep observations that had non missing and non-zero values for the refund variables.
           #     ( total_coe_refunds!=0 & !is.na(total_coe_refunds)))
         ) |>
  mutate(recap_levyshare = levy_adjustment/lastyear_levy,
        #  adjustment_check = aggregate_refunds + levy_adjustment   # all zeros: they are the same value for all observatoins
         ) 


adjust_all
```


The **Levy Recapture Files** break up the refunds into 2 categories: PTAB/SP Refunds and CofE (Over-Assessment) Refunds. 

Treasurer's office sent the account specific files to the Clerk's office, and the Clerk's office sent them to Drucker and Merriman. 

Two of the file have very detailed PTAB&SP and CofE tabs that have very detailed sheets of the amount of refund from previous years' appeals, but not sure how to use that information for now. (2022 and 2023 are missing the detailed sheets)

_Note: the variables are named "recouped" in these files which is very confusing for our analysis._^However, the variable names do make sense from the Treasurer's point of view, and they made the files in the first place.  

```{r}
# year = Tax Year. Date in file name is from agency creation of file or reception of file date.

refund2021 <- readxl::read_xlsx("PTAB/levy recapture/Levy Recapture - vf2 as received from CCTO 2022-03-23.xlsx")|>
  mutate(year = 2021) |>
  select(-Total) |>
  rename(`Agency Number` = `Agency Number (Text)`,
         
         `CofE (Over-Assessment)` = `CofE Recouped`) |>
  mutate(across(where(is.numeric), round, digits =0))

refund2022 <- readxl::read_xlsx("PTAB/levy recapture/Levy Recapture - 221116.xlsx") |>
  mutate(year = 2022)

# refund data for Nov 1 2022 to Oct 31 2023. These refund would be added to the levy for tax year 2023?
refund2023 <- readxl::read_xlsx("PTAB/levy recapture/Levy Recapture - 231129 orig from TR.xlsx") |>
  mutate(year = 2023)

# refund data for Nov 1 2023 through Oct 31 2024. These refunds would be added to the levy for tax year 2025?
refund2024 <- readxl::read_xlsx("PTAB/levy recapture/Levy Recapture - 241115 orig from TR.xlsx") |>
  mutate(year = 2024)

refund_all <- rbind(refund2021, refund2022, refund2023, refund2024) |>
  rename(agency_number = `Agency Number`,
         agency_name = `Agency Name`,
         refunded_sp_ptab = `SP/PTAB Recouped`,  # recouped is confusing variable name, so renamed to refunds
         refunded_coe = `CofE (Over-Assessment)`) |>
  mutate(across(where(is.numeric), round, digits =0)) |>
  
  # keep observations with non-missing variables
  filter(!is.na(agency_number) #&
           # ((refunded_sp_ptab!=0 & !is.na(refunded_sp_ptab)) | 
           #     (refunded_coe!=0 & !is.na(refunded_coe)))
         ) |>
  mutate(total_refunds = refunded_sp_ptab + refunded_coe)

refund_all

write_csv(adjust_all, "output/adjust_all.csv")

write_csv(refund_all, "output/refunds_all.csv")

refund_all |>
  group_by(year) |>
  summarize(sum(total_refunds, na.rm = T))
```


# Merriman Replication

For Levy Adjustment Excel Files have the taxing agency, adjustment eligibility, previous year's tax rate and previous year's levy, as well a the amount of refunds from PTAB and COEs. 

Merriman has output in the word document within the `PTAB` folder that has his descriptive stats for 2024. They are recreated below for 2024 and other tax years. 

```{r}
deciles <- adjust_all |> 
  group_by(year) |>
  summarize(probs = seq(0.05, 0.95, by = .1),
            quantiles = quantile(recap_levyshare, probs =  seq(0.05, 0.95, by = 0.1), na.rm = TRUE) )

deciles |> filter(probs == 0.95)
```

In 2022, 95% of  taxing agencies had refunds equal to less than 4.6% of their levy. In 2024, 95% of agencies had 2.7% of their levy be refunded. 


```{r}
table(adjust_all$year)

levyshare_byagency <- adjust_all |> 
  group_by(year) |>
  arrange(year, desc(recap_levyshare)) |>
  mutate(cumsum = cumsum(levy_adjustment)) |>
  select(year, agency_name, recap_levyshare, levy_adjustment, cumsum)

# Merriman's for comparison for 2024
levyshare_byagency |> filter(year == 2024)

levyshare_byagency |> filter(year == 2021)
levyshare_byagency |> filter(year == 2022)
levyshare_byagency |> filter(year == 2023)
```






# Combine data sources

```{r}

# Let's do some preliminary clean up work.

rm(adjust2021, adjust2022, adjust2023, adjust2024, 
   refund2021,refund2022, refund2023, refund2024,
   agency_names)

```

## Join data


```{r eval=FALSE, include=FALSE}


# Initial Filters
recap_all |>
  select(year) |>
  distinct()

adjust_all |>
  select(year) |>
  distinct()

# Check for na's

recap_all |>
  count(is.na(agency_number)) #9

adjust_all |>
  count(is.na(agency_number)) #2

# Check for duplicates

recap_all |>
  group_by(agency_number) |>
  reframe(agency_number, n = n()) |>
  filter(n != 3)

recap_all |>
  count(is.na(agency_number))

adjust_all |>
 group_by(agency_number) |>
  reframe(agency_number, n = n()) |>
  filter(n != 3)

adjust_all |>
  count(is.na(agency_number))

drop_adjust <- adjust_all |>
  group_by(agency_number) |>
  reframe(agency_number, n = n()) |>
  filter(n != 3) |>
  distinct() #52

drop_recap <- recap_all |>
  group_by(agency_number) |>
  reframe(agency_number, n = n()) |>
  filter(n != 3) |>
  distinct() #102

# I'M JUST GOING TO DROP THESE OBSERVATIONS FOR NOW!!!!!! - MVH

# Alea disagrees with dropping them ^

drop_adjust <- as.list(drop_adjust$agency_number)
drop_recap <- as.list(drop_recap$agency_number)

# 2760 obs.

adjust_all_filtered <- adjust_all |>
  filter(!is.na(agency_number)) |>
  filter(!(agency_number %in% drop_adjust)) |>
  filter(!(agency_number %in% drop_recap))

#8217 obs.

recap_all_filtered <- recap_all |>
  filter(!is.na(agency_number)) |>
  filter(!(agency_number %in% drop_adjust)) |>
  filter(!(agency_number %in% drop_recap))

```

```{r}


adjust_recap_all <- full_join(
  refund_all, adjust_all,
  by = c("year", "agency_number", "agency_name")
)


adjust_recap_all <- adjust_recap_all |>
  mutate(
    # adjust_eligible = ifelse(is.na(adjust_eligible), "Not Eligible", adjust_eligible),
    # levy_adjustment = ifelse(is.na(levy_adjustment), 0, levy_adjustment),
    # recap_levyshare = ifelse(is.na(recap_levyshare), 0, recap_levyshare)
    ) #|>filter(year != 2024)

# Let's rename those misleading original variable names!!!

adjust_recap_all <- adjust_recap_all |>

# After discussion, we decided variables from the "Levy Adjustment" file referencing refunds were
# ACTUALLY the value of refunds that were recaptured and added to the levy value. adjustment files do not have refund information for non-eligible agencies.
# 
# Thus, relevant variables from the Levy Adjustment files are getting renamed with "recap".

  rename(
    # only agencies eligible for recapture provisions will have values for these variables:
    ptab_recap = total_ptab_refunds,
         coe_recap = total_coe_refunds,
         total_recap = aggregate_refunds,
    
# We should also rename the refund values to match the syntax
# any agency that paid refunds during the previous tax year will have values for these variables:
         ptab_refund = refunded_sp_ptab,
         coe_refund = refunded_coe,
         total_refund = total_refunds) |>
  
  # reorder so key variables are visible right away and next to each other:
  select(year, agency_number, agency_name, total_recap, total_refund, levy_adjustment, adjust_eligible, everything())


adjust_recap_all
```

## Final Data Assembly

At this point, we have the data for all Eligible taxing agencies, but missing values for Agencies that are not eligible for levy adjustments (from Fund 408). 

We want to get the values for all agencies. 

```{r}
# agency_fund408_sums had all years in ptaxsim. Filter to just 2021-2023 for now?
final_df <- left_join(adjust_recap_all, agency_fund408_sums|> filter(year>2020), by = c("agency_number" = "agency_num", "year") ) |>
    mutate(
   # adjust_eligible = ifelse(home_rule_ind == 1, "Not Eligible", adjust_eligible),
   # levy_adjustment = ifelse(is.na(levy_adjustment), 0, levy_adjustment),
    #recap_levyshare = ifelse(is.na(recap_levyshare), 0, recap_levyshare)
    )

# Select only relevant, non-redundant variables

final_df_temp <- final_df |>
  select(year, 
         agency_number, 
         agency_name = agency_name.x,
         fund408,
         recap_levyshare,
         adjust_eligible,
         home_rule_ind,
         minor_type,
         levy,
         final_levy,
         final_rate,
         total_refund,
         ptab_refund,
         coe_refund,
         total_recap,
         ptab_recap,
         coe_recap,
         levy_adjustment,
         )

df_final_variables <- final_df_temp |>
  names()

df_final_variables

df <- final_df_temp

df |> 
  filter(year !=2024) |> # since ptaxsim database doesn't have fund 408 values for that tax year yet.
  
  # difference between ptaxsim fund 408 recaptured levy amounts and levy adjustment/recaptured amounts from excel files received from Clerk's/treasurer's office
  mutate(
    fund408 = ifelse(is.na(fund408), 0, fund408),
    diff = abs(fund408 - levy_adjustment),
         ) |>
  
  arrange(desc(diff), agency_name ) |>
  select(year, agency_name, diff, fund408, levy_adjustment, total_refund, total_recap) 




#write_csv(df, "levy_refunds_recoupments_by_agency_2006-2023.csv")

write_csv(df |>
            filter(between(year, 2021, 2023)), 
          "levy_refunds_recoupments_by_agency_2021-2023.csv")

write_csv(df,  "levy_refunds_recoupments_by_agency_2021-2024.csv")

```

# Data Exploration

```{r include = FALSE}

#df <- read_csv("levy_refunds_recoupments_by_agency.csv")

```

## Aggregation to some Composite increase?

_only potential option is use the grouped_labels from past levy project tangent?_


## Descriptive Statistics: Eligible vs. Ineligible

```{r}
df |>
  group_by(year, adjust_eligible) |>
  reframe(n = n()) |>
  ggplot(aes(x = year, y = n, fill = adjust_eligible)) +
    geom_col(position = "dodge") +
    theme_classic()

```

```{r}

df |>
#  filter(between(year, 2021, 2023)) |>
  mutate(year = as.integer(year)) |>
  group_by(year, adjust_eligible) |>
  reframe(sum_levy = sum(levy, na.rm=TRUE)) |>
  ggplot(aes(x = year, y = sum_levy, color = adjust_eligible)) +
    geom_line() +
    theme_classic()

```

```{r}

df |>
  filter(between(year, 2021, 2023)) |>
  mutate(year = as.integer(year)) |>
  group_by(year, adjust_eligible) |>
  reframe(sum_levy = sum(levy, na.rm = T), n = n()) |>
  ggplot(aes(x = year, y = sum_levy/n, color = adjust_eligible)) +
    geom_line() +
    theme_classic() +
  labs(title = "Average (Mean) Levy")

```

```{r}

df |>
  #filter(between(year, 2021, 2023)) |>
  mutate(year = as.integer(year)) |>
  group_by(year, adjust_eligible) |>
  reframe(sum_refund = sum(abs(total_refund), na.rm = T), n = n()) |>
  ggplot(aes(x = year, y = sum_refund, color = adjust_eligible)) +
    geom_line() +
    theme_classic() +
  labs(title = "Refunds by Eligibility")

```

```{r}

df |>
  group_by(year, adjust_eligible) |>
  summarize(perc_levy_ref = sum(abs(total_refund), na.rm = T)/sum(levy, na.rm = T)) |>
  ggplot(aes(x = year, y = perc_levy_ref, color = adjust_eligible)) +
  geom_line() +
  theme_classic()


```



## Who is Eligible but Not Recouping Their Full Amount?

```{r}
eligible <- df |> filter(adjust_eligible == "Eligible") |>
    mutate(
    fund408 = ifelse(is.na(fund408), 0, fund408),
    diff = abs(fund408 - levy_adjustment)
         )

not_eligible <- df |> filter(adjust_eligible == "Not Eligible") |>
    mutate(
    fund408 = ifelse(is.na(fund408), 0, fund408),
    diff = abs(fund408 - levy_adjustment)
         )

eligible |> filter(levy_adjustment==0 | is.na(levy_adjustment))




#non eligible agencies should not have adjustment values or fund408 values
not_eligible |> filter(levy_adjustment!=0 | fund408!=0)
```



## Refunds and Recapture by Minor Class


```{r}

df |>
  filter(year == 2021) |>
  group_by(minor_type, adjust_eligible) |>
  summarize(n = n()) |>
  arrange(desc(n)) |> 
  pivot_wider(names_from = adjust_eligible, values_from = n)


# 
# df |>
#   filter(minor_type %in% c("PARK", "LIBRARY", "ELEMENTARY")) |>
#   group_by(minor_type, adjust_eligible, year) |>
#   reframe(n = n()) |>
#   ggplot(aes(x = c("year", "minor_type"), y = n, fill = adjust_eligible)) +
#   geom_col() +
#   theme_classic()
  

```