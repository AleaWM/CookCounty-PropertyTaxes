---
title: "Agency Funds"
format: 
  html:
    code-fold: true
    toc: true
    toc-location: left
    tbl-cap-location: margin
    fig-cap-location: margin
    df-print: paged
---


```{r warning = FALSE, message = FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
options(scipen=999)

library(tidyverse)
library(ptaxsim)
library(DBI)
library(data.table)

is.integer64 <- function(x){
  class(x)=="integer64"
}

```


# Recapture Data from PTAXSIM 

```{r}
# #| eval: false

ptaxsim_db_conn <- DBI::dbConnect(RSQLite::SQLite(),
  "./ptaxsim.db/ptaxsim-2023.0.0.db")

agency_info <- DBI::dbGetQuery(
  ptaxsim_db_conn,
  "SELECT *
  FROM agency
  "
  ) %>%
  mutate_if(is.integer64, as.integer) |>
  mutate_if(is.integer, as.numeric)

agency_fund <- DBI::dbGetQuery(
  ptaxsim_db_conn,
  "SELECT *
  FROM agency_fund
  "
  )


agency_names <- DBI::dbGetQuery(
  ptaxsim_db_conn,
  "SELECT DISTINCT *
  FROM agency_info
  "
  )


agency_fund_info <- DBI::dbGetQuery(
  ptaxsim_db_conn,
  "SELECT *
  FROM agency_fund_info
  "
  ) 

agency_funds <- left_join(agency_fund, agency_fund_info)
agency_funds <- agency_funds %>%
  mutate_if(is.integer64, as.integer) |>
  mutate_if(is.integer, as.numeric)

agency_funds <- left_join(agency_funds, agency_names)

#agency_funds |> write_csv("agency_funds.csv")

```



## PTAXSIM Fund Data: Rate Change from Levy Adjustment

```{r}
agency_funds |> filter(fund_num==408) |>
  select(year, agency_name_short, final_levy, final_rate, fund_num) |>
  arrange(desc(final_rate))

agency_funds |> filter(fund_num==408) |>
  select(year, agency_name_short, final_levy, final_rate, fund_num, major_type) |>
  arrange(desc(final_rate)) |>
  ggplot() + 
  geom_line(aes(x=year, y=final_rate, group=agency_name_short, color = major_type, alpha = .3))

agency_funds |> filter(fund_num==408) |>
  select(year, agency_name_short, final_levy, final_rate, fund_num, major_type) |>
  arrange(desc(final_rate)) |>
  ggplot() + geom_line(aes(x=year, y=final_levy, group=agency_name_short, alpha = .4, color = major_type))+
    labs(title = "Levy amount from Fund 408.\nAll Agencies with Fund 408")


agency_funds |> filter(fund_num==408 & final_levy < 2000000) |>
  select(year, agency_name_short, final_levy, final_rate, fund_num, major_type) |>
  arrange(desc(final_rate)) |>
  ggplot() + 
  geom_line(aes(x=year, y=final_levy, group=agency_name_short, alpha = .4, color = major_type)) +
  labs(title = "Levy amount from Fund 408.", subtitle = "Excludes largest agency amounts")
```


```{r}
agency_fund408_sums <- agency_funds |> 
  group_by(year, agency_num, agency_name, major_type, minor_type) |>
  mutate(fund408 = ifelse(fund_num == 408, final_levy, 0),
         not_recap = ifelse(fund_num != 408, final_levy, 0) ) |>
  summarize(across(c(levy, final_levy, final_rate, fund408, not_recap), sum, na.rm=TRUE))

agency_fund408_sums |> 
  filter(year > 2019) |>
  mutate(recap_levyshare = fund408/final_levy,
         recap_revratio = fund408/not_recap) |>
  ggplot() + 
  geom_line(aes(x=year, y=recap_levyshare, group=agency_name, alpha = .4, color = major_type)) +
  labs(title = "Fund 408 / Total Levy", caption = "Fund data form PTAXSIM")

agency_fund408_sums |> 
    filter(year > 2019) |>
  mutate(recap_levyshare = fund408/final_levy,
         recap_revratio = fund408/not_recap) |>
  ggplot() + 
  geom_line(aes(x=year, y=recap_revratio, group=agency_name, alpha = .4, color = major_type)) +
  labs(title = "Fund 408 / Non-Recapture Levy", caption = "Fund data form PTAXSIM")



# after summing to taxing agency level, join the levy back in.
agency_fund408_sums <- left_join(agency_fund408_sums, agency_info, by = c("year", "agency_num"))
```

```{r}
agency_fund408_sums
```



# PTAB Documents from Clerk / Treasurer

## Levy Adjustment Files

The **Levy Adjustment** Files exist for 4 years. They use the refund amounts from the previous year to calculate how much to add to Fund 408 for the tax year in the file. 

These are the files that Merriman wants us to fill in the non-eligible agencies' information. 

For example, Levy Adjustment 2021 shows the amount that was refunded in 2020. 
`ptab_refunds` from these files represent the recaptured funds from eligible agencies (if they did not waive their right to recapture the funds) that they had to give back the previous tax year due to successful PTAB appeals.

All observations' `aggregate_refund` amounts equal their `levy_adjustment` values. 

```{r}
#| tbl-cap: "`adjust_all` has all levy adjustments from the new recapture legislation since 2021. Variables labeled with `refund` represent the amount that was recaptured due to refunds for eligible taxing agencies"


adjust2021 <- readxl::read_xlsx("PTAB/Levy Adjustment 2021 for PA 102-0519 CORRECTED.xlsx") |>
  mutate(year = 2021) |>    # year = Tax Year
  select(year, 
         agency_number = Agency,
         agency_name = `Agency Name`,
         adjust_eligible = `Adjustment Eligibility`,
         lastyear_rate = `2020 Rate`,
         lastyear_levy = `2020 Total Tax`,
         total_ptab_refunds = `Total SPO/PTAB Refunds\r\nCORRECTED\r\n(Mar 23, 2022)`,
         total_coe_refunds = `Total Certificate of Error Refunds\r\nCORRECTED\r\n(Mar 23, 2022)`,
         aggregate_refunds = `Aggregate Refunds\r\nCORRECTED\r\n(Mar 23, 2022)`,
         levy_adjustment = `2021 Prior Year Levy Adjustment CORRECTED\r\n(Mar 23, 2022)`
         ) 
  

adjust2022 <- readxl::read_xlsx("PTAB/Levy Adjustment 2022 for PA 102-0519.xlsx") |>
  mutate(year = 2022) |>
    select(year, 
         agency_number = Agency,
         agency_name = `Agency Name`, 
         adjust_eligible = `Adjustment Eligibility`,
         lastyear_rate = `2021 Rate`,
         lastyear_levy = `2021 Total Tax`,
         total_ptab_refunds = `Total SPO/PTAB Refunds`,
         total_coe_refunds = `Total Certificate of Error Refunds`,
         aggregate_refunds = `Aggregate Refunds`,
         levy_adjustment = `2022 Prior Year Levy Adjustment\r\n(Fund 408)`
         ) 

adjust2023 <- readxl::read_xlsx("PTAB/Levy Adjustment 2023 for PA 102-0519.xlsx") |>
  mutate(year = 2023) |>
      select(year, 
         agency_number = Agency,
         agency_name = `Agency Name`, 
        adjust_eligible = `Adjustment Eligibility`,
         lastyear_rate = `2022 Rate`,
         lastyear_levy = `2022 Total Tax`,
         total_ptab_refunds = `Total SPO/PTAB Refunds`,
         total_coe_refunds = `Total Certificate of Error Refunds`,
         aggregate_refunds = `Aggregate Refunds`,
         levy_adjustment = `2023 Prior Year Levy Adjustment\r\n(Fund 408)`
         )

adjust2024 <- readxl::read_xlsx("PTAB/Levy Adjustment 2024 for PA 102-0519.xlsx") |>
  mutate(year = 2024) |>
      select(year, 
         agency_number = Agency,
         agency_name = `Agency Name`, 
        adjust_eligible = `Adjustment Eligibility`,
         lastyear_rate = `2023 Rate`,
         lastyear_levy = `2023 Total Tax`,
         total_ptab_refunds = `Total SPO/PTAB Refunds`,
         total_coe_refunds = `Total Certificate of Error Refunds`,
         aggregate_refunds = `Aggregate Refunds`,
         levy_adjustment = `2024 Prior Year Levy Adjustment\r\n(Fund 408)`
         )


adjust_all <- rbind(adjust2021, adjust2022, adjust2023, adjust2024) |>
  mutate(levy_adjustment = as.numeric(levy_adjustment)) |>
  mutate(across(.cols=c(lastyear_levy:levy_adjustment), round, digits = 0)) |>
  
  # exclude the rows that had Totals in them (using their missing agency numbers)
  filter(!is.na(agency_number)) |>
  mutate(recap_levyshare = levy_adjustment/lastyear_levy
         ) 


adjust_all
```

## Levy Recapture Files from Clerk / Treasurer

The **Levy Recapture Files** break up the refunds into 2 categories: PTAB/SP Refunds and CofE (Over-Assessment) Refunds. 

Treasurer's office sent the account specific files to the Clerk's office, and the Clerk's office sent them to Drucker and Merriman. 

Two of the file have very detailed PTAB&SP and CofE tabs that have very detailed sheets of the amount of refund from previous years' appeals, but not sure how to use that information for now. (2022 and 2023 are missing the detailed sheets)

_Note: the variables are named "recouped" in these files which is potentially confusing_ ^ However, the variable names do make sense from the Treasurer's point of view, and they made the files in the first place.  

```{r}
# year = Tax Year. Date in file name is from agency creation of file or reception of file date.

refund2021 <- readxl::read_xlsx("PTAB/levy recapture/Levy Recapture - vf2 as received from CCTO 2022-03-23.xlsx")|>
  mutate(year = 2021) |>
  select(-Total) |>
  rename(`Agency Number` = `Agency Number (Text)`,
         
         `CofE (Over-Assessment)` = `CofE Recouped`) |>
  mutate(across(where(is.numeric), round, digits =0))

refund2022 <- readxl::read_xlsx("PTAB/levy recapture/Levy Recapture - 221116.xlsx") |>
  mutate(year = 2022)

# refund data for Nov 1 2022 to Oct 31 2023. These refund would be added to the levy for tax year 2023?
refund2023 <- readxl::read_xlsx("PTAB/levy recapture/Levy Recapture - 231129 orig from TR.xlsx") |>
  mutate(year = 2023)

# refund data for Nov 1 2023 through Oct 31 2024. These refunds would be added to the levy for tax year 2024?
refund2024 <- readxl::read_xlsx("PTAB/levy recapture/Levy Recapture - 241115 orig from TR.xlsx") |>
  mutate(year = 2024)

refund_all <- rbind(refund2021, refund2022, refund2023, refund2024) |>
  rename(agency_number = `Agency Number`,
         agency_name = `Agency Name`,
         refunded_sp_ptab = `SP/PTAB Recouped`,  # recouped is confusing variable name, so renamed to refunds
         refunded_coe = `CofE (Over-Assessment)`) |>
  mutate(across(where(is.numeric), round, digits =0)) |>
  
  # keep observations with non-missing variables
  filter(!is.na(agency_number)) |>
  mutate(total_refunds = refunded_sp_ptab + refunded_coe)

#refund_all <- refund_all |> filter(total_refunds>0)

refund_all
```

`adjust_all` saved as `output/adjust_all.csv`

`refunds_all` saved as `output/refunds_all.csv`

```{r include = FALSE}
write_csv(adjust_all, "output/adjust_all.csv")

write_csv(refund_all, "output/refunds_all.csv")
```


```{r}
refund_all |>
  group_by(year) |>
  summarize(sum(total_refunds, na.rm = T))
```


# Merriman Replication

For Levy Adjustment Excel Files have the taxing agency, adjustment eligibility, previous year's tax rate and previous year's levy, as well a the amount of refunds from PTAB and COEs. 

Merriman has output in the word document within the `PTAB` folder that has his descriptive stats for 2024. They are recreated below for 2024 and other tax years. 

```{r}
deciles <- adjust_all |> 
  group_by(year) |>
  summarize(probs = seq(0.05, 0.95, by = .1),
            quantiles = quantile(recap_levyshare, probs =  seq(0.05, 0.95, by = 0.1), na.rm = TRUE) )

deciles |> filter(probs == 0.95)
```

In 2022, 95% of  taxing agencies had refunds equal to less than 4.6% of their levy. In 2024, 95% of agencies had 2.7% of their levy be refunded. 


```{r}
table(adjust_all$year)

levyshare_byagency <- adjust_all |> 
  group_by(year) |>
  arrange(year, desc(recap_levyshare)) |>
  mutate(cumsum = cumsum(levy_adjustment)) |>
  select(year, agency_name, recap_levyshare, levy_adjustment, cumsum)

# Merriman's for comparison for 2024
levyshare_byagency |> filter(year == 2024)

levyshare_byagency |> filter(year == 2021)
levyshare_byagency |> filter(year == 2022)
levyshare_byagency |> filter(year == 2023)
```

## Refunds as a share of agency's levy

Merriman said he looked at refunds, but he looked at refunds only for agencies eligible for recapture. (Non Homerule Agencies.)

- Add levy data to the refund data. Levy data from `agency_info` table in ptaxsim db.


```{r}
library(ggrepel)

refund_all |> 
  left_join(agency_info, by = c("agency_number" = "agency_num", "year")) |>
  mutate(share = abs(total_refunds)/total_final_levy,
         share = ifelse(share>1, 1,share)) |>
  ggplot() +
    geom_jitter(aes(x=year, y = share, color = as.character(home_rule_ind))) + 

 # geom_point(aes(x=year, y = share, color = as.character(home_rule_ind))) + 
  geom_text_repel(data = . %>% filter(share > 0.2),
aes(x=year, y = share, label = agency_name), nudge_y =.05 ) + 
  scale_y_continuous(limits = c(0, 1.2), breaks = c(0, .25, .5, .75, 1)) + 
  labs(title = "Refunds / Levy Amount",
       caption = "Agencies at 100% were Infinite: They did not have a levy, but they did have a refund.",
       color = "")
```




# Combine data sources

```{r include = FALSE}

# Let's do some preliminary clean up work.

rm(adjust2021, adjust2022, adjust2023, adjust2024, 
   refund2021,refund2022, refund2023, refund2024)

```

## Join data


```{r checkmissing, eval=FALSE, include=FALSE}


# Initial Filters
recap_all |>
  select(year) |>
  distinct()

adjust_all |>
  select(year) |>
  distinct()

# Check for na's

recap_all |>
  count(is.na(agency_number)) #9

adjust_all |>
  count(is.na(agency_number)) #2

# Check for duplicates

recap_all |>
  group_by(agency_number) |>
  reframe(agency_number, n = n()) |>
  filter(n != 3)

recap_all |>
  count(is.na(agency_number))

adjust_all |>
 group_by(agency_number) |>
  reframe(agency_number, n = n()) |>
  filter(n != 3)

adjust_all |>
  count(is.na(agency_number))
```

```{r}
adjust_recap_all <- full_join(
  refund_all, adjust_all,
  by = c("year", "agency_number", "agency_name")
)


adjust_recap_all <- adjust_recap_all |>
  mutate(
    ) 

# Let's rename those misleading original variable names!!!

adjust_recap_all <- adjust_recap_all |>

# After discussion, we decided variables from the "Levy Adjustment" file referencing refunds were
# ACTUALLY the value of refunds that were recaptured and added to the levy value. adjustment files do not have refund information for non-eligible agencies.
# 
# Thus, relevant variables from the Levy Adjustment files are getting renamed with "recap".

  rename(
    # only agencies eligible for recapture provisions will have values for these variables:
    ptab_recap = total_ptab_refunds,
         coe_recap = total_coe_refunds,
         total_recap = aggregate_refunds,
    
# We should also rename the refund values to match the syntax
# any agency that paid refunds during the previous tax year will have values for these variables:
         ptab_refund = refunded_sp_ptab,
         coe_refund = refunded_coe,
         total_refund = total_refunds) |>
  
  # reorder so key variables are visible right away and next to each other:
  select(year, agency_number, agency_name, total_recap, total_refund, levy_adjustment, adjust_eligible, everything())


adjust_recap_all
```

## Final Data Assembly

At this point, we have the data for all Eligible taxing agencies, but missing values for Agencies that are not eligible for levy adjustments (from Fund 408). 

We want to get the values for all agencies. 

```{r}
# agency_fund408_sums has all levies for all years, but fund 408 only began being used in 2021. Filter to just 2021-2023 for now before joining to the adjust_recap_all data object
final_df <- left_join(adjust_recap_all, agency_fund408_sums|> 
                        filter(year>2020), by = c("agency_number" = "agency_num", "year") ) |>
  mutate(
    adjust_eligible = ifelse(home_rule_ind == 1 & is.na(adjust_eligible), 
                             "Not Eligible",
                            ifelse(home_rule_ind == 0 & is.na(adjust_eligible), 
                                   "Eligible", adjust_eligible)
                            )
    # levy_adjustment = ifelse(is.na(levy_adjustment), 0, levy_adjustment),
    #recap_levyshare = ifelse(is.na(recap_levyshare), 0, recap_levyshare)
  )

# Select only relevant, non-redundant variables

final_df_temp <- final_df |>
  select(year, 
         agency_number, 
         agency_name = agency_name.x,
         fund408,
         recap_levyshare,
         adjust_eligible,
         home_rule_ind,
         major_type,
         minor_type,
         levy,
         final_levy,
         final_rate,
         total_refund,
         ptab_refund,
         coe_refund,
         total_recap,
         ptab_recap,
         coe_recap,
         levy_adjustment,
         )

df_final_variables <- final_df_temp |>
  names()

df_final_variables
```


```{r}
df <- final_df_temp

df |> 
  filter(year !=2024 & year > 2020) |> # since ptaxsim database doesn't have fund 408 values for that tax year yet.
  
  # difference between ptaxsim fund 408 recaptured levy amounts and levy adjustment/recaptured amounts from excel files received from Clerk's/treasurer's office
  mutate(
    fund408 = ifelse(is.na(fund408), 0, fund408),
    diff = abs(fund408 - levy_adjustment),    # difference between ptaxsim recapture data and levy adjustment files recapture data
         ) |>
  
  arrange(desc(diff), agency_name ) |>
  select(year, agency_name, diff, fund408, levy_adjustment, total_refund, total_recap)
```

Joined data saved as `levy_refunds_recoupments_by_agency_2021-2024.csv`

```{r}
#| eval: false
#| include: false


write_csv(df |>
            filter(between(year, 2021, 2023)), 
          "levy_refunds_recoupments_by_agency_2021-2023.csv")

write_csv(df,  "levy_refunds_recoupments_by_agency_2021-2024.csv")

```

# Data Exploration

```{r include = FALSE}

#df <- read_csv("levy_refunds_recoupments_by_agency.csv")

```

## Aggregation to some Composite increase?

_only potential option is use the grouped_labels from past levy project tangent?_

[ ] Identify municipality that schools are in. Many are in multiple schools. I will focus on the "easy" school districts that are fully within a municipality.

[ ] update `grouped_munis_manual_entry.xlsx` file in the `handcoded_cat` column.

```{r}
grouped_agencies <- read_csv("../Levy Elasticity Research/Levy_Elasticity/Necessary_Files/grouped_munis_manual_entry.xlsx")

taxcodes <-  DBI::dbGetQuery(
  ptaxsim_db_conn,
  "SELECT *
  FROM tax_code
  "
  )

impacted_taxcodes <- agency_funds |> 
  filter(agency_num %in% refund_all$agency_number & final_levy > 0) |>
  left_join(taxcodes) |>
  group_by(year, tax_code_num, tax_code_rate) |>
  summarize(rate_408 = sum(ifelse(fund_num==408, final_rate, 0)),
         rate_non408 = sum(ifelse(fund_num!=408, final_rate, 0))
  ) |> 
  arrange(desc(rate_408))

impacted_taxcodes |> 
  filter(year > 2020) |>
  mutate(rate_ratio = rate_408 / rate_non408) |>
  arrange(desc(rate_ratio)) 

impacted_taxcodes |> 
  filter(year ==2023) |>
  mutate(rate_ratio = rate_408 / rate_non408) |>
  arrange(desc(rate_ratio)) 

##  Link municipality name to tax code

# impacted_taxcodes |> 
#   filter(year ==2023) |> 
#   left_join(
#     (taxcodes |> select(tax_code_num, agency_num) ) , by = "tax_code_num"  )|>
#   left_join(
#     (agency_names |> filter(minor_type == "MUNI" | agency_name == "TOWN CICERO")), 
#    by = "agency_num")
muni_names <- taxcodes |>
  left_join(agency_names) |> 
  filter(minor_type == "MUNI" | agency_name == "TOWN CICERO") |>
  select(tax_code_num, agency_name, agency_name_short) |>
   distinct()


impacted_v2 <- taxcodes |> 
  select(-agency_rate) |>
  left_join(agency_funds, by = c("year", "agency_num") ) |>
  select(year, agency_num, fund_num, levy, final_levy, final_rate, tax_code_num, tax_code_rate) |>
  filter(#agency_num %in% refund_all$agency_number & 
           final_levy > 0) |>
  left_join(muni_names, by = "tax_code_num") |>
  group_by(year, tax_code_num, tax_code_rate) |>
  summarize(
    muni_name = first(agency_name),
    rate_408 = sum(ifelse(fund_num==408, final_rate, 0)),
         rate_non408 = sum(ifelse(fund_num!=408, final_rate, 0))
  ) |> 
#  arrange(desc(rate_408)) |>
    mutate(rate_ratio = rate_408 / rate_non408) |>
  arrange(desc(rate_ratio)) 

impacted_v2 |> filter(year == 2022)

impacted_v2 |> filter(year == 2023)

```


## Descriptive Statistics: Eligible vs. Ineligible
```{r include = FALSE}
rm(agency_info, agency_fund_info, agency_fund, agency_names)
```
```{r}
df |>
  group_by(year, adjust_eligible) |>
  filter(final_levy>0) |>
  reframe(n = n()) |>
  ggplot(aes(x = year, y = n, fill = adjust_eligible)) +
    geom_col(position = "dodge") +
    theme_classic() +
  labs(title = "Taxing agencies & the Recapture Provision", x="", y = "", fill = "",
       caption = "Only includes agencies with levies > 0")

```

```{r}

df |>
  filter(final_levy>0) |>
  mutate(year = as.integer(year)) |>
  group_by(year, adjust_eligible) |>
  reframe(sum_levy = sum(levy, na.rm=TRUE)) |>
  ggplot(aes(x = year, y = sum_levy, color = adjust_eligible)) +
    geom_line() +
    theme_classic()

```

```{r}

df |>
  filter(between(year, 2021, 2023)) |>
    filter(final_levy>0) |>

  mutate(year = as.integer(year)) |>
  group_by(year, adjust_eligible) |>
  reframe(sum_levy = sum(levy, na.rm = T), n = n()) |>
  ggplot(aes(x = year, y = sum_levy/n, color = adjust_eligible)) +
    geom_line() +
    theme_classic() +
  labs(title = "Average (Mean) Levy")

```

```{r}

df |>
  filter(final_levy>0) |>
  mutate(year = as.integer(year)) |>
  group_by(year, adjust_eligible) |>
  reframe(sum_refund = sum(abs(total_refund), na.rm = T), n = n()) |>
  ggplot(aes(x = year, y = sum_refund, color = adjust_eligible)) +
    geom_line() +
    theme_classic() +
  labs(title = "Refunds by Eligibility")

```

```{r}

df |>
    filter(final_levy>0) |>

  group_by(year, adjust_eligible) |>
  summarize(perc_levy_ref = sum(abs(total_refund), na.rm = T)/sum(levy, na.rm = T)) |>
  ggplot(aes(x = year, y = perc_levy_ref, color = adjust_eligible)) +
  geom_line() +
  theme_classic()


```



## Who is Eligible but Not Recouping Their Full Amount?

> Barrington and Matteson became homerule by vote in Nov. 2022. They were not eligible for recapture funds as of the 2022 levy. Can be seen in the agency_info table within ptaxsim and in Notes column of 2022 Adjustment excel file. 

```{r}
eligible <- df |> filter(adjust_eligible == "Eligible") |>
    mutate(
    fund408 = ifelse(is.na(fund408), 0, fund408),
    diff = abs(fund408 - levy_adjustment)
         )

eligible |> filter(fund408==0 | is.na(levy_adjustment)) |> distinct(agency_name)
eligible |> filter(levy_adjustment==0 | is.na(levy_adjustment)) |> distinct(agency_name)

```

```{r}

not_eligible <- df |> filter(adjust_eligible == "Not Eligible") |>
    mutate(
    fund408 = ifelse(is.na(fund408), 0, fund408),
    diff = abs(fund408 - levy_adjustment)
         )

#non eligible agencies should not have adjustment values or fund408 values
not_eligible |> filter(levy_adjustment!=0 | fund408!=0)
```


## Refunds and Recapture by Minor Class


```{r}
df |>
  filter(year == 2021 & final_levy > 0 ) |>
  group_by(minor_type, adjust_eligible) |>
  summarize(n = n()) |>
  arrange(desc(n)) |> 
  pivot_wider(names_from = adjust_eligible, values_from = n)
```

```{r}
df |>
  filter(minor_type %in% c("PARK", "LIBRARY", "ELEMENTARY") & 
           final_levy>0) |>
  group_by(year, minor_type, adjust_eligible ) |>
  summarize(n = n()) |>
  ggplot() +
  geom_col(aes(x = year, y = n,, fill = minor_type), position = "dodge") +
  theme_classic() +
  facet_wrap(~adjust_eligible) +
  labs(title  = "Number of Agencies Eligible for Recapture by Minor Type")


```

```{r}
df |>
  filter(final_levy>0) |>
  group_by(year, major_type, adjust_eligible ) |>
  summarize(n = n()) |>
  ggplot() +
  geom_col(aes(x = year, y = n,, fill = major_type), position = "dodge") +
  theme_classic() +
  facet_wrap(~adjust_eligible) +
    labs(title  = "Number of Agencies Eligible for Recapture by Major Type")

```

# Recapture Ratios - Merriman's graph request

Distribution of ratios:

- recaptured amount for 2022 / recaptured amount for 2021 is one observation

- 2023/2022 is another observation,
 
 
Stacked line graph of summed non408 fund tax rates and 408 fund tax rates from ptaxsim agency-fund level data.

408 fund tax rate / summed(non-408 fund tax rates)

Add line for average or median that is darker 

maybe a case study for "worst case scenario" agencies with large tax rate increase from fund 408?
 
```{r eval = FALSE}
agency_funds |> 
  filter(year > 2020) |> # since ptaxsim database doesn't have fund 408 values for that tax year yet.
  
  # difference between ptaxsim fund 408 recaptured levy amounts and levy adjustment/recaptured amounts from excel files received from Clerk's/treasurer's office
  group_by(agency_number) |>
  arrange(agency_number, year) |>
  mutate(
    ratio = fund408 / lag(fund408)) |> 
  filter(fund_num == 408 ) |>
  arrange(desc(final_rate))
```
 
 
```{r}
df |> 
  filter(#year !=2024 &
           year > 2020) |> # since ptaxsim database doesn't have fund 408 values for that tax year yet.
  
  # difference between ptaxsim fund 408 recaptured levy amounts and levy adjustment/recaptured amounts from excel files received from Clerk's/treasurer's office
  group_by(agency_name, agency_number) |>
  arrange(agency_number, year) |>
  mutate(
    ratio = fund408 / lag(fund408)) |> 
  filter(ratio < 5) |>
  ggplot() +
  geom_line(aes(x=as.character(year), y = ratio, color = major_type, alpha = .5, group = agency_number))+
  geom_point(aes(x=as.character(year), y = ratio, color = major_type, alpha = .5) ) +
  geom_text(aes(x=as.character(year), y = ratio, label=agency_name, nudge_x = 0.2), check_overlap = TRUE)+
  scale_y_continuous(limits = c(0, 6) ) +
    labs(title = "Recapture / Previous Year's Recapture", x= element_blank(),
         caption = "Excludes agencies where the recapture amount increased 
         by more than 500% (i.e. ratio > 5 is excluded)")

         
   # geom_jitter(aes(x=year, y = ratio, color = major_type, alpha = .5))
```

```{r}
df |> 
  filter(#year !=2024 &
           year > 2020) |> # since ptaxsim database doesn't have fund 408 values for that tax year yet.
  
  # difference between ptaxsim fund 408 recaptured levy amounts and levy adjustment/recaptured amounts from excel files received from Clerk's/treasurer's office
  group_by(agency_name, agency_number) |>
  arrange(agency_number, year) |>
  mutate(
    ratio = fund408 /final_levy) |> 
  ggplot() +
  geom_line(aes(x=as.character(year), y = ratio, color = major_type, alpha = .5, group = agency_number))+
  geom_point(aes(x=as.character(year), y = ratio, color = major_type, alpha = .5) ) +
  geom_text(aes(x=as.character(year), y = ratio, label=agency_name, nudge_x = 0.2), check_overlap = TRUE)+
    labs(title = "Recapture Levy Share", x= element_blank(),
         caption = "Recapture Share = Fund 408 Amount/ Final Levy")

df |> 
  filter(#year !=2024 &
           year > 2020) |> # since ptaxsim database doesn't have fund 408 values for that tax year yet.
  
  # difference between ptaxsim fund 408 recaptured levy amounts and levy adjustment/recaptured amounts from excel files received from Clerk's/treasurer's office
  group_by(agency_name, agency_number) |>
  arrange(agency_number, year) |>
  mutate(
    ratio = fund408 /final_levy) |> 
  filter(ratio < .5) |>
  ggplot() +
  geom_line(aes(x=as.character(year), y = ratio, color = major_type, alpha = .5, group = agency_number))+
  geom_point(aes(x=as.character(year), y = ratio, color = major_type, alpha = .5) ) +
  geom_text(aes(x=as.character(year), y = ratio, label=agency_name, nudge_x = 0.2), check_overlap = TRUE)+
    labs(title = "Recapture Levy Share", x= element_blank(),
         caption = "Recapture Share = Fund 408 Amount/ Final Levy.
         Excludes > .5 ratios.")
```

```{r}
df |> 
  filter(#year !=2024 &
           year > 2020) |>
  group_by(agency_name, agency_number) |>
  arrange(agency_number, year) |>
  mutate(
    ratio = fund408 / lag(fund408)) |> 
  filter(ratio > 5) |>
  ggplot() +
  geom_line(aes(x=as.character(year), y = ratio, color = major_type, alpha = .5, group = agency_number))+
  geom_point(aes(x=as.character(year), y = ratio, color = major_type, alpha = .5) ) +
  geom_text(aes(x=as.character(year), y = ratio, label=agency_name, nudge_x = 0.2, nudge_y = 4), check_overlap = TRUE)+
  scale_y_continuous(limits = c(0, 200) ) +
  labs(title = "Outliers: Obs with ratio over 5", x= element_blank())
 
```


```{r}
df |> 
  filter(#year !=2024 &
           year > 2020) |> 
  group_by(agency_name, agency_number) |>
  arrange(agency_number, year) |>
  mutate(
    ratio = levy_adjustment / lag(levy_adjustment)) |> 
  ggplot() +
  geom_line(aes(x=as.character(year), y = ratio, color = major_type, alpha = .5, group = agency_number))+
  geom_point(aes(x=as.character(year), y = ratio, color = major_type, alpha = .5) ) +
  geom_text(aes(x=as.character(year), y = ratio, label=agency_name, nudge_x = 0.2, nudge_y = 4), check_overlap = TRUE)+
  scale_y_continuous(limits = c(0, 200) ) +
  labs(title = "Levy Adjustment Variable from Treasurer", x= element_blank())
 
```

```{r}
df |> 
  filter(year > 2020) |> 
  group_by(agency_name, agency_number) |>
  arrange(agency_number, year) |>
  mutate(
    ratio = levy_adjustment / levy) |> 
  ggplot() +
  geom_line(aes(x=as.character(year), y = ratio, color = major_type, alpha = .5, group = agency_number))+
  # geom_point(aes(x=as.character(year), y = ratio, color = major_type, alpha = .5) ) +
  labs(title = "Levy Adjustment / Levy", x= element_blank())
 
```


```{r}
df |> 
  filter(year > 2020 & adjust_eligible == "Eligible") |> 
  group_by(agency_name, agency_number) |>
  arrange(agency_number, year) |>
  mutate(
    ratio = -total_refund / levy) |> 
  ggplot() +
  geom_line(aes(x=as.character(year), y = ratio, color = major_type, alpha = .5, group = agency_number))+
   geom_point(aes(x=as.character(year), y = ratio, color = major_type, alpha = .5) ) +
  labs(title = "Refund / Levy", x= element_blank())
 
```


