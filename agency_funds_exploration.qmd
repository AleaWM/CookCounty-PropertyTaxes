---
title: "Agency Funds"
format: html
---


```{r}
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
options(scipen=999)

library(tidyverse)
library(ptaxsim)
library(DBI)
library(data.table)
```

# Data Collection

## PTAXSIM Part

```{r}
# #| eval: false

ptaxsim_db_conn <- DBI::dbConnect(RSQLite::SQLite(),
  "./ptaxsim.db/ptaxsim-2023.0.0.db")

taxcodes <- DBI::dbGetQuery(
  ptaxsim_db_conn,
  "SELECT *
  FROM tax_code
  "
  )

agency_info <- DBI::dbGetQuery(
  ptaxsim_db_conn,
  "SELECT *
  FROM agency
  "
  )

agency_fund <- DBI::dbGetQuery(
  ptaxsim_db_conn,
  "SELECT *
  FROM agency_fund
  "
  )


agency_names <- DBI::dbGetQuery(
  ptaxsim_db_conn,
  "SELECT DISTINCT *
  FROM agency_info
  "
  )


agency_fund_info <- DBI::dbGetQuery(
  ptaxsim_db_conn,
  "SELECT *
  FROM agency_fund_info
  "
  )

agency_funds <- left_join(agency_fund, agency_fund_info)

agency_funds <- left_join(agency_funds, agency_names)
agency_funds <- left_join(agency_funds, taxcodes, by = c("year","agency_num"))

#agency_funds |> write_csv("agency_funds.csv")

```


```{r}
taxing_agencies <- agency_funds |> 
  group_by(year, agency_num, agency_name, tax_code_num, tax_code_rate)


# after summing to taxing agency level, join the levy back in.
agency_funds <- left_join(agency_funds, agency_info, by = c("year", "agency_num"))

```

```{r}
#agency_funds <- read_csv("agency_funds.csv")

agency_funds <- agency_funds |> filter(year > 2020)

table(agency_funds$fund_name, agency_funds$year)
```


## PTAB Documents

```{r}
# year = Tax Year. Date in file name is from agency creation of file or reception of file date.
recap2021 <- readxl::read_xlsx("PTAB/levy recapture/LEvy Recapture - 221116.xlsx") |>
  mutate(year = 2021)

recap2022 <- readxl::read_xlsx("PTAB/levy recapture/LEvy Recapture - 231129 orig from TR.xlsx") |>
  mutate(year = 2022)

recap2023 <- readxl::read_xlsx("PTAB/levy recapture/LEvy Recapture - 241115 orig from TR.xlsx") |>
  mutate(year = 2023)

recap_all <- rbind(recap2021, recap2022, recap2023) |>
  rename(agency_number = `Agency Number`,
         agency_name = `Agency Name`,
         sp_ptab = `SP/PTAB Recouped`,
         coe = `CofE (Over-Assessment)`)
```

```{r}
# year = Tax Year. Date in file name is from agency creation of file or reception of file date.
adjust2021 <- readxl::read_xlsx("PTAB/Levy Adjustment 2021 for PA 102-0519 CORRECTED.xlsx") |>
  mutate(year = 2021) |>
  select(year, 
         agency = Agency,
         agency_name = `Agency Name`,
         adjust_eligible = `Adjustment Eligibility`,
         lastyear_rate = `2020 Rate`,
         total_tax = `2020 Total Tax`,
         total_ptab_refunds = `Total SPO/PTAB Refunds\r\nCORRECTED\r\n(Mar 23, 2022)`,
          # `Total SPO/PTAB Refunds CORRECTED (Mar 23, 2022)`,
         total_coe_refunds = `Total Certificate of Error Refunds\r\nCORRECTED\r\n(Mar 23, 2022)`,
           #`Total Certificate of Error Refunds CORRECTED (Mar 23, 2022)`,
         aggregate_refunds = `Aggregate Refunds\r\nCORRECTED\r\n(Mar 23, 2022)`,
           #`Aggregate Refunds CORRECTED (Mar 23, 2022)`,
         prior_levy_adjustment = `2021 Prior Year Levy Adjustment CORRECTED\r\n(Mar 23, 2022)`
           #`2021 Prior Year Levy Adjustment CORRECTED (Mar 23, 2022`
         
         ) 
  

adjust2022 <- readxl::read_xlsx("PTAB/Levy Adjustment 2022 for PA 102-0519.xlsx") |>
  mutate(year = 2022) |>
    select(year, 
         agency = Agency,
         agency_name = `Agency Name`, 
         adjust_eligible = `Adjustment Eligibility`,
         lastyear_rate = `2021 Rate`,
         total_tax = `2021 Total Tax`,
         total_ptab_refunds = `Total SPO/PTAB Refunds`,
         total_coe_refunds = `Total Certificate of Error Refunds`,
         aggregate_refunds = `Aggregate Refunds`,
         prior_levy_adjustment = `2022 Prior Year Levy Adjustment\r\n(Fund 408)`
         ) 

adjust2023 <- readxl::read_xlsx("PTAB/Levy Adjustment 2023 for PA 102-0519.xlsx") |>
  mutate(year = 2023) |>
      select(year, 
         agency = Agency,
         agency_name = `Agency Name`, 
        adjust_eligible = `Adjustment Eligibility`,
         lastyear_rate = `2022 Rate`,
         total_tax = `2022 Total Tax`,
         total_ptab_refunds = `Total SPO/PTAB Refunds`,
         total_coe_refunds = `Total Certificate of Error Refunds`,
         aggregate_refunds = `Aggregate Refunds`,
         prior_levy_adjustment = `2023 Prior Year Levy Adjustment\r\n(Fund 408)`
         )

adjust2024 <- readxl::read_xlsx("PTAB/Levy Adjustment 2024 for PA 102-0519.xlsx") |>
  mutate(year = 2024) |>
      select(year, 
         agency = Agency,
         agency_name = `Agency Name`, 
        adjust_eligible = `Adjustment Eligibility`,
         lastyear_rate = `2023 Rate`,
         total_tax = `2023 Total Tax`,
         total_ptab_refunds = `Total SPO/PTAB Refunds`,
         total_coe_refunds = `Total Certificate of Error Refunds`,
         aggregate_refunds = `Aggregate Refunds`,
         prior_levy_adjustment = `2024 Prior Year Levy Adjustment\r\n(Fund 408)`
         )

# We don't need to include 2024
# WE FOUND 2022!!!!!!!

adjust_all <- rbind(adjust2021, adjust2022, adjust2023#, adjust2024
                    ) |>
  rename(agency_number = agency)

#write_csv(adjust_all, "adjust_all.csv")

#write_csv(recap_all, "recap_all.csv")
```

# Data Concanation

```{r}
#| eval: false

# Let's do some preliminary clean up work.

keep <- c("adjust_all", "recap_all")

all <- ls()

remove <- setdiff(all, keep)

rm(list = remove)

rm(all, remove)

```

## Join and coalesce [sic] data

> why dropping agencies if they didnt have refunds every year? 


```{r}

# Initial Filters

recap_all |>
  select(year) |>
  distinct()

adjust_all |>
  select(year) |>
  distinct()

# So we need to find 2022 AND drop 2024 from adjust_all
# Great success. See above.

# Check for na's

recap_all |>
  count(is.na(agency_number)) #9

adjust_all |>
  count(is.na(agency_number)) #2

# Check for duplicates

recap_all |>
  group_by(agency_number) |>
  reframe(agency_number, n = n()) |>
  filter(n != 3)

recap_all |>
  count(is.na(agency_number))

adjust_all |>
 group_by(agency_number) |>
  reframe(agency_number, n = n()) |>
  filter(n != 3)

adjust_all |>
  count(is.na(agency_number))

drop_adjust <- adjust_all |>
  group_by(agency_number) |>
  reframe(agency_number, n = n()) |>
  filter(n != 3) |>
  distinct() #52

drop_recap <- recap_all |>
  group_by(agency_number) |>
  reframe(agency_number, n = n()) |>
  filter(n != 3) |>
  distinct() #102

drop_adjust <- as.list(drop_adjust$agency_number)
drop_recap <- as.list(drop_recap$agency_number)

# I'M JUST GOING TO DROP THESE OBSERVATIONS FOR NOW!!!!!!

# 2760 obs.

adjust_all_filtered <- adjust_all |>
  filter(!is.na(agency_number)) |>
  filter(!(agency_number %in% drop_adjust)) |>
  filter(!(agency_number %in% drop_recap))

#8217 obs.

recap_all_filtered <- recap_all |>
  filter(!is.na(agency_number)) |>
  filter(!(agency_number %in% drop_adjust)) |>
  filter(!(agency_number %in% drop_recap))

```

```{r}

adjust_recap_all <- left_join(
  recap_all_filtered, adjust_all_filtered, 
  by = c("agency_number", "year")
)

adjust_recap_all <- adjust_recap_all |>
  mutate(total_ptab_refunds = ifelse(is.na(total_ptab_refunds), sp_ptab,
                                     total_ptab_refunds),
         total_coe_refunds = ifelse(is.na(total_coe_refunds), coe,
                                    total_coe_refunds),
         aggregate_refunds = total_ptab_refunds + total_coe_refunds)

adjust_recap_all_final <- adjust_recap_all |>
  select(year, agency_number, agency_name = agency_name.x, total_ptab_refunds, total_coe_refunds, aggregate_refunds)

agency_fund <- agency_fund |>
  rename(agency_number = agency_num)

adjust_recap_all_final <- adjust_recap_all_final |>
  left_join(agency_fund, by = c("year", "agency_number"))
```