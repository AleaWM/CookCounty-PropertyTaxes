---
title: "Summary Tables for Commercial and Industrial Properties, with and without Incentives"
format: 
  html:
    code-fold: true
    toc: true
    tbl-cap-location: margin
---

# Data Preparation

```{r setup, warning = FALSE, output = FALSE}

library(tidyverse)
library(DT)
library(flextable) # for exporting to word or PDF files. Kable does not do that

library(sf)

knitr::opts_chunk$set(warning = FALSE, message = FALSE)

set_flextable_defaults(theme_fun = theme_vanilla, 
                       padding = 2,
                       line_spacing = 1,
                       big.mark = ",",
                       )
# keypins <- read_csv("Output/all_keypins.csv")

options(DT.options = list())
```



```{r}
#| echo: true
#| code-fold: false

# all pins for 2022
ptax_pins <- read_csv("Output/Dont_Upload/0_joined_PIN_data_2022.csv") %>% 
  mutate(class = as.numeric(class)) %>%
    select(-c(propclass_1dig:av.y))


```


```{r}
#| echo: true
#| code-fold: false

bor <- read_csv("Output/borappeals.csv") %>%
  mutate(project_appellant = paste(project_id, sep = "-", appellant))

# temporary work-around until we have full keypin list:
proj_xwalk <- read_csv("Output/all_keypins.csv")               
# all commercial valuation properties but made with very unreliable data from commercial valuation dataset. 

# combine project IDs to PINs:
ptax_pins <- ptax_pins %>% left_join(proj_xwalk)



#  create tc_muninames from helper file:
source("scripts/helper_tc_muninames_2022.R")
tc_muninames <- tc_muninames %>%  select(-year)

# add muni names by joining tax code info:
ptax_pins <- ptax_pins %>% 
  mutate(tax_code_num = as.character(tax_code_num)) %>%
  left_join(tc_muninames)



# original class_dict variables already in 0_joined data
# but I do want the new-ish variables I created to be brought in:
class_dict <- read_csv("./Necessary_Files/class_dict_expanded.csv") %>%
  select(class_code, comparable_props, Alea_cat, incent_prop)

ptax_pins <- ptax_pins %>% 
  left_join(class_dict, by =  c("class" = "class_code")) %>%
  mutate(clean_name = ifelse(is.na(clean_name), "0_Unincorporated", clean_name))

```

```{r}
#| label: tbl-borprojectpins
#| tbl-cap: "**BoR Appeal PINs associated with Project ID; includes all property classes.** Uses first occurance of the an appeal id and the appealant name to create project IDs for each PIN. This deal with PINS that appealed multiple time and makes each PIN a unique occurance. Takes numbers for athe decimal point in `appealid to create project ID. Uses Board of Review Appeals data from the Cook County Data Portal. Counts number of times each PIN appealed its valuation. 102,619 PINs from BoR data (downloaded May 2024)."

bor_pins <- bor %>% 
  group_by(pin) %>% 
  arrange(desc(tax_year)) %>%
  summarize(pin = first(pin),
            class_bor = list(unique(class)),
            appellant = first(appellant),
            project_id = first(project_id), 
            timesappealed = n() ) %>%
  mutate(proj_appeallant = paste(project_id, "-", appellant))

 
bor_pins %>%
  group_by(project_id) %>%
  summarize(pincount = n()) %>%
  arrange(desc(pincount)) %>% 
   head() %>% 
  datatable(rownames = FALSE)
```


```{r}
#| label: tbl-borproject-appellants
#| tbl-cap: "**Non-residential PINs associated with an appellant each tax year.** Excludes property classes 0-399. Data from Board of Review Appeals dataset on Cook Data Portal. "


appellant_table <- bor %>% 
  filter(class > 399 & tax_year > 2018) %>%
  group_by(pin) %>% 
  arrange(desc(tax_year)) %>%
  summarize(pin = first(pin),
            class_bor = list(unique(class)),
            appellant = first(appellant),
            project_id = first(project_id), 
            timesappealed = n(),
            tax_year=tax_year) %>%
  mutate(proj_appellant = paste(project_id, "-", appellant)) %>%
  ungroup() %>%
  group_by(tax_year, proj_appellant) %>%

 # group_by(tax_year, appellant) %>%
  summarize(pincount = n()) %>%
  arrange(desc(pincount))%>%
  pivot_wider(names_from = "tax_year", values_from = "pincount")%>%  
  datatable(rownames = FALSE)

appellant_table
```

### Create Project ID

```{r}

ptax_pins <- ptax_pins %>% left_join(bor_pins, by = "pin")

# now do it the other way and compare 
ptax_pins <- ptax_pins %>% 
  mutate( both_ids = project_id,
          both_ids = ifelse(is.na(both_ids), keypin, both_ids ),
          both_ids = ifelse(is.na(both_ids), pin, both_ids))

table_list <- ptax_pins %>% 
  filter(class > 599) %>% 
  group_by(both_ids, appellant) %>% 
  summarize(pincount = n(),
            pin_list = (list(unique(pin))),
            class_list = (list(unique(class))),
            appellant = ((list(unique(appellant)))) ) %>%
  arrange(desc(pincount))

table_list %>% datatable(rownames = FALSE)
```


# FMV 

<!--- Don't use tax_amount_exe for calculations below because it is the "naive" calculation of the current tax rate * exempt eav discussed in the exemptions research. --->

```{r}

eq2021 <- 3.0027
eq2022 <- 2.9237



commercial_classes <- c(401:435, 490, 491, 492, 496:499,
                        500:535,590, 591, 592, 597:599, 
                        700:799,
                        800:835, 891, 892, 897, 899)  

industrial_classes <- c(480:489,493, 
                        550:589, 593,
                        600:699,
                        850:890, 893
                        )

#nonres_pins2022 <- nonres_pins2022 %>% group_by(keypin) %>% mutate(proj_hasincentive = class)
ptax_pins <- ptax_pins %>% 
  mutate(class_group = str_sub(class, 1,1),
         class_group = case_when(
          (class_group == 5 & class %in% commercial_classes) ~ "5A",
          (class_group == 5 & class %in% industrial_classes) ~ "5B",
          (class_group == 8 & class %in% commercial_classes ) ~ "8A",
          (class_group == 8 & class %in% industrial_classes ) ~ "8B",
          TRUE ~ as.character(class_group))) %>%
  
  mutate(
    taxable_av = (final_tax_to_dist/(tax_code_rate/100))  / eq2022, # current value that taxing agencies can tax for their levies
    taxable_fmv = taxable_av / loa,

    #  taxable_av = ((final_tax_to_dist/(tax_code_rate/100)) - (all_exemptions + abatements) ) / eq2022,
    untaxable_value_eav = all_exemptions + abatements + (final_tax_to_tif/(tax_code_rate/100)),
    untaxable_value_av = untaxable_value_eav / eq2022,
    untaxable_value_fmv = untaxable_value_av / loa,
    
    exempt_eav= (all_exemptions + abatements),
    exempt_fmv = exempt_eav / eq2022 / loa, 
    
    fmv_inTIF = ifelse(in_tif==1, av/loa, 0),
    fmv_tif_increment = ifelse(final_tax_to_tif > 0, ((final_tax_to_tif / (tax_code_rate/100)) / eq2022 ) / loa, 0),
    

    ) %>%
  select(tax_code, class, pin, taxable_fmv, untaxable_value_fmv, fmv_inTIF, fmv_tif_increment, fmv, total_billed, final_tax_to_dist, final_tax_to_tif, tax_code_rate, eav, equalized_av, av, everything())

```


> Total Value should equal Current Taxable Value + non-Taxable Value
where 
non-Taxable Value = Value in TIF Increment + Reduced Value from Policy Choices
where
Reduced Value = Tax Exempt Value from Homeowners exemptions or abatements + Reduced Value from lower levels of assessments due to incentive classifications. 


### Cook County Total Value

> Numbers will be slightly different than Sankey graph due to using more accurate levels of assessment when calculating the Fair Market Value of properties.  

```{r}
#| label: tbl-cooktotals
#| tbl-cap: "Summed FMV of PINs in Cook County by Property Class."

table_cook <- ptax_pins %>%
  summarize(proptype_pincount = n(),
          #  projects = n_distinct(both_ids), # mostly for industrial and commercial properties
            fmv_incentive = sum(ifelse(class >=600 & class <=900, fmv, 0), na.rm = TRUE),
            taxable_fmv = sum(taxable_fmv, na.rm=TRUE),
            incents_inTIFs = sum(ifelse(class >=600 & class <=900 & in_tif == 1, fmv, 0), na.rm = TRUE),
            fmv_inTIF = sum(fmv_inTIF, na.rm=TRUE),
            fmv_tif_increment = sum(fmv_tif_increment, na.rm=TRUE),
            untaxable_value = sum(untaxable_value_fmv , na.rm=TRUE),
            fmv = sum(fmv, na.rm=TRUE),

          #  zero_bill = sum(zero_bill, na.rm=TRUE),
            
) %>%
  mutate(pct_fmv_untaxable = untaxable_value / fmv)


flextable(table_cook) %>% 
  set_header_labels(proptype_pincount = 'PINs', projects = "Project IDs", fmv = 'Total FMV', taxable_fmv = 'Taxable FMV', untaxable_value = 'Value not Taxable for Levy', fmv_incentive = "FMV with Incent.Class.", fmv_inTIF = 'FMV in TIFs', fmv_tif_increment = 'TIF Increment FMV' , pct_fmv_untaxable = 'Value not Taxed (%)', incentive_fmv = 'FMV with Incent. Classification', incents_inTIFs = 'FMV with Incent. Class. in TIFs' )
```

Taxable value is the frozen EAV within an area + taxable EAV for residential properties after exemptions and abatements (for non-residential properties) are subtracted from the equalized AV. 

### Cook Total Value by Properties' Major Class

```{r}
#| label: tbl-cooktotals-majorclass
#| tbl-cap: "Summed FMV of PINs in Cook County by Property Class. Untaxable EAV includes homeowner exemptions for 200 level properties, abatements for other property class types, EAV in the TIF increment, and EAV that has been reduced due to incentive classifications"

table_MC <- ptax_pins %>%
  group_by(class_group) %>%
  summarize(proptype_pincount = n(),
          #  projects = n_distinct(both_ids), # mostly for industrial and commercial properties
            fmv_incentive = sum(ifelse(class >=600 & class <=900, fmv, 0), na.rm = TRUE),
            taxable_fmv = sum(taxable_fmv, na.rm=TRUE),
            incents_inTIFs = sum(ifelse(class >=600 & class <=900 & in_tif == 1, fmv, 0), na.rm = TRUE),
            fmv_inTIF = sum(fmv_inTIF, na.rm=TRUE),
            fmv_tif_increment = sum(fmv_tif_increment, na.rm=TRUE),
            untaxable_value = sum(untaxable_value_fmv , na.rm=TRUE),
            fmv = sum(fmv, na.rm=TRUE),

          #  zero_bill = sum(zero_bill, na.rm=TRUE),
            
) %>%
  mutate(pct_fmv_untaxable = untaxable_value / fmv)


flextable(table_MC) %>% 
  set_header_labels(class_group = "Property Type", proptype_pincount = 'PINs',# projects = "Project IDs", 
                    fmv = 'Total FMV', taxable_fmv = 'Taxable FMV', untaxable_value = 'Value not Taxable for Levy', fmv_incentive = "FMV with Incent.Class.", fmv_inTIF = 'FMV in TIFs', fmv_tif_increment = 'TIF Increment FMV' , pct_fmv_untaxable = 'Value not Taxed (%)', incentive_fmv = 'FMV with Incent. Classification', incents_inTIFs = 'FMV with Incent. Class. in TIFs' )
```


## Cook Totals by Property Type 

```{r}
#| label: tbl-cooktotals-somehowdifferent
#| tbl-cap: "Summed FMV of PINs in Cook County by Property Type `Alea_cat`"

table_proptype <- ptax_pins %>% 
  group_by(Alea_cat) %>%
    summarize(proptype_pincount = n(),
          #  projects = n_distinct(both_ids), # mostly for industrial and commercial properties
            fmv_incentive = sum(ifelse(class >=600 & class <=900, fmv, 0), na.rm = TRUE),
            taxable_fmv = sum(taxable_fmv, na.rm=TRUE),
            incents_inTIFs = sum(ifelse(class >=600 & class <=900 & in_tif == 1, fmv, 0), na.rm = TRUE),
            fmv_inTIF = sum(fmv_inTIF, na.rm=TRUE),
            fmv_tif_increment = sum(fmv_tif_increment, na.rm=TRUE),
            untaxable_value = sum(untaxable_value_fmv , na.rm=TRUE),
            fmv = sum(fmv, na.rm=TRUE),

          #  zero_bill = sum(zero_bill, na.rm=TRUE),
            
) %>%
  mutate(pct_fmv_untaxable = untaxable_value / fmv) %>%
   select(Alea_cat, proptype_pincount, fmv, taxable_fmv, untaxable_value, pct_fmv_untaxable, fmv_tif_increment, fmv_inTIF, fmv_incentive, incents_inTIFs, everything() )


flextable(table_proptype) %>% 
  set_header_labels(Alea_cat = "Property Type", proptype_pincount = 'PINs',# projects = "Project IDs", 
                    fmv = 'Total FMV', taxable_fmv = 'Taxable FMV', untaxable_value = 'Value not Taxable for Levy', fmv_incentive = "FMV with Incent.Class.", fmv_inTIF = 'FMV in TIFs', fmv_tif_increment = 'TIF Increment FMV' , pct_fmv_untaxable = 'Value not Taxed (%)', incentive_fmv = 'FMV with Incent. Classification', incents_inTIFs = 'FMV with Incent. Class. in TIFs' )

```

```{r}
#| label: tbl-cooktotals-allAleacats
#| tbl-cap: "Commercial and Industrial PINs in Cook County. Includes all non-residential property (i.e. property classes 0-399 are excluded."

nonres_pins2022 <- ptax_pins %>% 
  group_by(both_ids) %>%
  arrange(keypin, class) %>%
  mutate(min_class = first(class),
         max_class = last(class)) %>% 
  filter(max_class > 399 & max_class < 900) %>%
  ungroup()


#nonres_pins2022 <- nonres_pins2022 %>% group_by(keypin) %>% mutate(proj_hasincentive = class)
table <- nonres_pins2022 %>% 
  group_by(Alea_cat) %>%
  
      summarize(proptype_pincount = n(),
          #  projects = n_distinct(both_ids), # mostly for industrial and commercial properties
            fmv_incentive = sum(ifelse(class >=600 & class <=900, fmv, 0), na.rm = TRUE),
            taxable_fmv = sum(taxable_fmv, na.rm=TRUE),
            incents_inTIFs = sum(ifelse(class >=600 & class <=900 & in_tif == 1, fmv, 0), na.rm = TRUE),
            fmv_inTIF = sum(fmv_inTIF, na.rm=TRUE),
            fmv_tif_increment = sum(fmv_tif_increment, na.rm=TRUE),
            untaxable_value = sum(untaxable_value_fmv , na.rm=TRUE),
            fmv = sum(fmv, na.rm=TRUE),

          zero_bill = sum(zero_bill, na.rm=TRUE),
            
) %>%
  mutate(pct_fmv_untaxable = untaxable_value / fmv,
         pct_incents = fmv_incentive / fmv) %>%
   select(Alea_cat, proptype_pincount, fmv, taxable_fmv, untaxable_value, pct_fmv_untaxable, fmv_tif_increment, fmv_inTIF, fmv_incentive, incents_inTIFs, everything() )


flextable(table) %>% 
  set_header_labels(Alea_cat = "Property Type", proptype_pincount = 'PINs',# projects = "Project IDs", 
                    fmv = 'Total FMV', taxable_fmv = 'Taxable FMV', untaxable_value = 'Value not Taxable for Levy', fmv_incentive = "FMV with Incent.Class.", fmv_inTIF = 'FMV in TIFs', fmv_tif_increment = 'TIF Increment FMV' , pct_fmv_untaxable = 'Value not Taxed', incentive_fmv = 'FMV with Incent. Classification', incents_inTIFs = 'FMV with Incent. Class. in TIFs', pct_incents = 'FMV with Incent. Class' )



```


```{r}
#| label: tbl-incentiveproject-cooktotals
#| tbl-cap: "Commercial and Industrial Incentive Projects & PINs in Cook County. Includes property classes 500-899 and 100 level land PINs if they are associated with a project id that has at least one incentive PIN."



incentive_pins2022 <- ptax_pins %>% 
  group_by(both_ids) %>%
  arrange(both_ids, class) %>%
  mutate(min_class = first(class),
         max_class = last(class)) %>% 
  filter(max_class > 499) %>%
  ungroup()

table <- incentive_pins2022 %>% 
  group_by(Alea_cat) %>%
  
        summarize(proptype_pincount = n(),
            projects = n_distinct(both_ids), # mostly for industrial and commercial properties
            fmv_incentive = sum(ifelse(class >=600 & class <=900, fmv, 0), na.rm = TRUE),
            taxable_fmv = sum(taxable_fmv, na.rm=TRUE),
            incents_inTIFs = sum(ifelse(class >=600 & class <=900 & in_tif == 1, fmv, 0), na.rm = TRUE),
            fmv_inTIF = sum(fmv_inTIF, na.rm=TRUE),
            fmv_tif_increment = sum(fmv_tif_increment, na.rm=TRUE),
            untaxable_value = sum(untaxable_value_fmv , na.rm=TRUE),
            fmv = sum(fmv, na.rm=TRUE),

          zero_bill = sum(zero_bill, na.rm=TRUE),
            
) %>%
  mutate(pct_fmv_untaxable = untaxable_value / fmv,
         pct_incents = fmv_incentive / fmv) %>%
   select(Alea_cat, projects, proptype_pincount, fmv, taxable_fmv, untaxable_value, pct_fmv_untaxable, fmv_tif_increment, fmv_inTIF, fmv_incentive, incents_inTIFs, everything() )


flextable(table) %>% 
  set_header_labels(Alea_cat = "Property Type", proptype_pincount = 'PINs', projects = "Project IDs", 
                    fmv = 'Total FMV', taxable_fmv = 'Taxable FMV', untaxable_value = 'Value not Taxable for Levy', fmv_incentive = "FMV with Incent.Class.", fmv_inTIF = 'FMV in TIFs', fmv_tif_increment = 'TIF Increment FMV' , pct_fmv_untaxable = 'Value not Taxed', incentive_fmv = 'FMV with Incent. Classification', incents_inTIFs = 'FMV with Incent. Class. in TIFs', pct_incents = 'FMV with Incent. Class' )


```

# Municipality Level Stats

```{r}
#| label: tbl-municlassgroup-totals
#| tbl-cap: "Major class types in Municipalities"


table_mctotals <- ptax_pins %>% 
  group_by(clean_name) %>%
  mutate(
    muni_proptype_pincount = n(),
             muni_projects = n_distinct(keypin), # mostly for industrial and commercial properties
             muni_fmv_incentive = sum(ifelse(class >=600 & class <=900, fmv, 0), na.rm = TRUE),
             muni_taxable_fmv = sum(taxable_fmv, na.rm=TRUE),
             muni_pins_withincents = sum(ifelse(class >=600 & class <=900 & in_tif == 1, 1, 0), na.rm = TRUE),

             muni_incents_inTIFs = sum(ifelse(class >=600 & class <=900 & in_tif == 1, fmv, 0), na.rm = TRUE),
             muni_fmv_inTIF = sum(fmv_inTIF, na.rm=TRUE),
             muni_fmv_tif_increment = sum(fmv_tif_increment, na.rm=TRUE),
             muni_untaxable_value = sum(untaxable_value_fmv , na.rm=TRUE),
             muni_fmv = sum(fmv, na.rm=TRUE),
           muni_zero_bill = sum(zero_bill, na.rm=TRUE),
  ) %>%
  ungroup() %>% 
  group_by(clean_name, class_group, muni_fmv) %>%
  
        summarize(proptype_pincount = n(),
            projects = n_distinct(keypin), # mostly for industrial and commercial properties
            fmv_incentive = sum(ifelse(class >=600 & class <=900, fmv, 0), na.rm = TRUE),
            taxable_fmv = sum(taxable_fmv, na.rm=TRUE),
            pins_withincents = sum(ifelse(class >=600 & class <=900 & in_tif == 1, 1, 0), na.rm = TRUE),

            incents_inTIFs = sum(ifelse(class >=600 & class <=900 & in_tif == 1, fmv, 0), na.rm = TRUE),
            fmv_inTIF = sum(fmv_inTIF, na.rm=TRUE),
            fmv_tif_increment = sum(fmv_tif_increment, na.rm=TRUE),
            untaxable_value = sum(untaxable_value_fmv , na.rm=TRUE),
            fmv = sum(fmv, na.rm=TRUE),
            #zero_bill = sum(zero_bill, na.rm=TRUE),
            
) %>%
  mutate(pct_fmv_untaxable = untaxable_value / muni_fmv,
         pct_incents = fmv_incentive / muni_fmv) %>%
  select(-muni_fmv)
# %>%
#    select(clean_name, class_group, projects, proptype_pincount, fmv, taxable_fmv, untaxable_value, pct_fmv_untaxable, fmv_tif_increment, fmv_inTIF, fmv_incentive, incents_inTIFs, everything() )


table_mctotals %>% datatable(rownames = FALSE,
         colnames = c('Municipality' = 'clean_name', 'Major Class' = 'class_group', 
                      'Projects' = 'projects', 'PINs per Project' = 'proptype_pincount', 
        'PINs w Incent. Class.' = 'pins_withincents',
        'FMV w/ Incent. Class. (%)' = 'pct_incents',
        
       'Class FMV' = 'fmv', 'Taxable FMV' = 'taxable_fmv',  
       'Value not Taxable for Levy' = 'untaxable_value' , 'FMV with Incent.Class.' = 'fmv_incentive',  
       'FMV in TIFs' = 'fmv_inTIF',  'TIF Increment FMV' = 'fmv_tif_increment', 
       'Value not Taxed (%)' = 'pct_fmv_untaxable' , 'FMV with Incent. Class. in TIFs' = 'incents_inTIFs'#,
      # 'Muni FMV' = 'muni_fmv'
        
   )) %>%
  formatPercentage( c(  'Value not Taxed (%)', 'FMV w/ Incent. Class. (%)' ), digits = 1) %>%
  formatCurrency(c('Class FMV', 'Taxable FMV', 'Value not Taxable for Levy', 'TIF Increment FMV', 'FMV with Incent.Class.', 'FMV with Incent. Class. in TIFs', 'FMV in TIFs' ), digits = 0)

```


```{r}
#| label: tbl-projectsinMunis
#| tbl-cap: "Commercial and Industrial properties only. Grouped by Property Type within Municipality. FMV is calculated from AV / LOA."


table1 <- nonres_pins2022 %>% 
  filter(Alea_cat %in% c("Industrial", "Commercial"))  %>%
  group_by(clean_name, Alea_cat) %>% 
          summarize(proptype_pincount = n(),
            projects = n_distinct(keypin), # mostly for industrial and commercial properties
            fmv_incentive = sum(ifelse(class >=600 & class <=900, fmv, 0), na.rm = TRUE),
            taxable_fmv = sum(taxable_fmv, na.rm=TRUE),
            incents_inTIFs = sum(ifelse(class >=600 & class <=900 & in_tif == 1, fmv, 0), na.rm = TRUE),
            fmv_inTIF = sum(fmv_inTIF, na.rm=TRUE),
            fmv_tif_increment = sum(fmv_tif_increment, na.rm=TRUE),
            untaxable_value = sum(untaxable_value_fmv , na.rm=TRUE),
            fmv = sum(fmv, na.rm=TRUE),
            av = sum(av, na.rm=TRUE),

          zero_bill = sum(zero_bill, na.rm=TRUE),
            
) %>%
  mutate(pct_fmv_untaxable = untaxable_value / fmv,
         pct_incents = fmv_incentive / fmv,
         pct_inTIF = fmv_inTIF / fmv) %>%
   select(Alea_cat, projects, proptype_pincount, fmv, av,
        # taxable_fmv, untaxable_value, 
         pct_fmv_untaxable, pct_incents, pct_inTIF 
        #fmv_tif_increment, fmv_inTIF, fmv_incentive, incents_inTIFs, everything() 
        )

datatable(table1,
          rownames= FALSE,
          colnames = c('Municipality' = 'clean_name',   'Property Type' = 'Alea_cat', 'PIN Count' = 'proptype_pincount', 'Project Count' = 'projects', 'Current Taxable AV' = 'av', 'FMV' = 'fmv',
       'FMV Untaxed (%)'  = 'pct_fmv_untaxable', 'FMV with Incent. Class. (%)' =  'pct_incents', 'FMV in TIF (%)' = 'pct_inTIF'),
       #   extensions = 'RowGroup',
          options = list(rowGroup = list(dataSrc = 0))) %>%
  formatCurrency(c('Current Taxable AV', 'FMV'), digits = 0) %>%
  formatPercentage(c('FMV Untaxed (%)', 'FMV with Incent. Class. (%)', 'FMV in TIF (%)'), digits = 3)
```



```{r}
#| label: tbl-incentivizedornot
#| tbl-cap: "Grouped by Incentivized or not within Municipality"

table2 <- nonres_pins2022 %>% 
    filter(Alea_cat != "Land") %>%
  group_by(clean_name, incent_prop) %>%   # projects can be counted twice if the project has incentive and normal commercial/industrial prop classes.
  summarize(pin_count = n(),
         project_count = n_distinct(keypin), 
         fmv_incent=sum(ifelse(between(class, 600, 899), av/loa, 0), na.rm=TRUE),
         av_ifnoincent =sum(ifelse(between(class, 600, 899), av*2.5, av), na.rm=TRUE),
         av=sum(av, na.rm=TRUE),
         fmv =sum(fmv, na.rm=TRUE)) 

datatable(table2,
          rownames= FALSE,
          colnames = c('Municipality' = 'clean_name',   'Incentivized?' = 'incent_prop', 'PIN Count' = 'pin_count', 'Project Count' = 'project_count', 'Current AV' = 'av', 'FMV' = 'fmv', 'FMV w/ Incent.Class.' = 'fmv_incent')) %>%
  formatCurrency(c('Current AV', 'av_ifnoincent', 'FMV', 'FMV w/ Incent.Class.'), digits = 0)
```

```{r}
#| label: tbl-amount-incentivized
#| tbl-cap: "Percent of Commercial and Industrial \"Market Value for Assessment Purposes\" that has a reduced assessment rate due to incentive classification"


table2 <- nonres_pins2022 %>% 
    filter(Alea_cat != "Land") %>%
  group_by(clean_name) %>%   # projects can be counted twice if the project has incentive and normal commercial/industrial prop classes.
  summarize(pin_count = n(),
          project_count = n_distinct(keypin), 
          fmv = sum(av / loa, na.rm=TRUE), 
          fmv_incent = sum(ifelse(between(class, 600, 899), av/loa, 0), na.rm=TRUE),

          av_incent = sum(ifelse(between(class, 600, 899), (av/loa)*0.25, 0), na.rm=TRUE),
          av_adjusted = sum(ifelse(between(class, 600, 899), (av/loa)*0.25, av), na.rm=TRUE), # AV if level of assessment was 25% for everyone

         av = sum(av, na.rm=TRUE),
         fmv = sum(av/loa, na.rm=TRUE)) %>%
  mutate(pct_av_incent = av_incent / av_adjusted,
         pct_fmv_incent = fmv_incent/fmv)  %>%
  select(-c(av_incent, fmv_incent))

datatable(table2,
          rownames= FALSE,
          colnames = c('Municipality' = 'clean_name', #  'Incentivized?' = 'incent_prop', 
                       'PIN Count' = 'pin_count', 'Projects' = 'project_count', 
                       'Current AV' = 'av',
                       'FMV' = 'fmv',
                     #  'FMV with Incent.Class.' = 'fmv_incent',
                      # 'AV with Incent.Class.' = 'av_incent',
                       'AV if 25% LOA' = 'av_adjusted', 
                       'AV Incentivized (%)' = 'pct_av_incent',
                       'FMV Incentivized (%)' = 'pct_fmv_incent'
                       )
          ) %>%
  formatCurrency(c('Current AV', 'FMV', 'AV if 25% LOA'), digits = 0) %>%
  formatPercentage(c( 'AV Incentivized (%)',
                       'FMV Incentivized (%)'), digits = 2)
```

```{r}
#| label: fig-pctincentivevalue
#| fig-cap: "Percent of Commercial and Industrial Market Value (for Assessment Purposes) that has Incentive Classification." 


muni_shp <- read_sf("https://gis.cookcountyil.gov/traditional/rest/services/politicalBoundary/MapServer/2/query?outFields=*&where=1%3D1&f=geojson")

table2 %>% 
  left_join(nicknames) %>%
  full_join(muni_shp, by = c("shpfile_name" = "MUNICIPALITY")) %>%

    ggplot(aes(fill = pct_fmv_incent)) +
    geom_sf(aes(geometry = geometry), color = "black") +
  theme_void() + 
  theme(axis.ticks = element_blank(), axis.text = element_blank())+
scale_fill_steps2(
    high = "#420420", low = "black",
  # midpoint = median(transfered_taxes),
                   show.limits=TRUE,
  nice.breaks=FALSE,
  na.value=NA,
                    n =4,
                       name = "Market Value (%)",
         labels = scales::percent
)
```

```{r, include = FALSE}


####  over 10,000 rows. Shows all keypins and count of pins  ###
#### for all commercial properties                           ###
# nonres_pins2022 %>% 
#   mutate(has_incentive = ifelse(class >= 600, 1, 0)) %>%
#   group_ by(keypin) %>%
#   summarize(count = n(),     # number of pins in project
#          sum = sum(has_incentive), # number of pins that had incentives
#          av = sum(av)) %>%
#   mutate(pct_pins_w_inct = sum/count ) %>%  # pct of pins that had incentive property class
#   arrange(desc(keypin))
```




# Assessed Value (AV) Tables

## Incentive and non-Incentive, Commercial and Industrial Properties

```{r echo = FALSE}
#| label: tbl-propertybreakdown
#| tbl-cap: "Breakdown of incentivized properties within commercial and industrial properties"

table <- nonres_pins2022 %>% 
      filter(Alea_cat != "Land") %>%

  group_by(clean_name, incent_prop, Alea_cat) %>%   # projects can be counted twice if the project has incentive and normal commercial/industrial prop classes.
  summarize(pin_count = n(),
         project_count = n_distinct(keypin),
         projects_bor = n_distinct(both_ids),
         av_adjusted = sum(ifelse(between(class, 600, 899), av*2.5, av)),
         av_incent = sum(ifelse(between(class, 600, 899), av*2.5, 0)),
         av=sum(av),
)  %>%
  mutate(#AV_incent = av_adjusted - av,
           pct_incent = av_incent / av_adjusted)


datatable(table,
          rownames= FALSE,
          colnames = c('Municipality' = 'clean_name', 'Incentivized?' = 'incent_prop',
                       'Property Type' = 'Alea_cat', 'PINs in Projects' = 'pin_count', 
                       'Project Count' = 'project_count',
                       'Current Taxable AV' = 'av',
                       'Total Assessed Market Value' = 'av_adjusted',
      'Assessed Market Value' = 'av_incent', 
      '% AV Incentivized' = 'pct_incent' )  ) %>%
  formatCurrency(c('Current Taxable AV', 'Assessed Market Value'), digits = 0) %>%
formatPercentage('% AV Incentivized', digits = 2)
```

```{r}
table <- incentive_pins2022 %>% 
  group_by(Alea_cat) %>%
  summarize(proptype_pincount = n(),
            projects = n_distinct(keypin),
            av_incent = sum(if_else(incent_prop == "Incentive", av, 0), na.rm=TRUE),
            av_nonincent = sum(ifelse(incent_prop == "Non-Incentive", av, 0), na.rm=TRUE),
            #     av_adjusted=sum(ifelse(between(class, 600, 899), av*2.5, av)),
            av=sum(av, na.rm=TRUE) ) %>%
  mutate(
    incent_av_adj = 2.5*av_incent ) %>%
  mutate(
    total_av_adjusted = incent_av_adj + av_nonincent,
         pct_incent = incent_av_adj / total_av_adjusted) %>%
  select(-c(av_incent, av_nonincent))

  

flextable(table) %>% 
 # set_caption("Totals for Cook County") %>% 
  set_header_labels(Alea_cat = "Property Type", proptype_pincount = 'PINs', projects = "Project IDs", av = 'Current Taxable AV')
```


## Projects with incentivized and non-incentivized PINs

```{r}
#| label: tbl-mixedprojects
#| tbl-cap: "Projects with Incentivized and non-Incentivized PIN Property Classes. Sorted from highest Taxable AV (from final final AV value (\"av_clerk\"))"

table <- nonres_pins2022 %>% 
      filter(Alea_cat != "Land") %>%

  mutate(has_incentive = ifelse(class >= 600, 1, 0)) %>%
  group_by(keypin) %>%
  summarize(count = n(),     # number of pins in project
         sum = sum(has_incentive), # number of pins that had incentives
      av_adjusted=sum(ifelse(between(class, 600, 899), av*2.5, av)),

         av = sum(av)) %>%
  mutate(pct_pins_w_inct = round(sum/count, digits = 3) ) %>%  # pct of pins that had incentive property class
  arrange(pct_pins_w_inct) %>% 
  filter(pct_pins_w_inct > 0 & pct_pins_w_inct < 1) %>%
  arrange(desc(pct_pins_w_inct)) %>%
  select(keypin, count, sum, pct_pins_w_inct, av, av_adjusted) %>% 
  arrange(desc(av))

## Other option for graphing the keypins with mixed property incentivization
## Using DT instead of flextable
# datatable(table,
#           rownames= FALSE,
#           colnames = c('Project ID' = 'keypin', 'PINs per Project' = 'count', 'PINs with Incentive Class' = 'sum', 'Assessed Value (Final)' = 'av', 'Pct of PINs Incentivized' = 'pct_pins_w_inct'))


flextable(table) %>% 
  set_caption("Projects with Both Incentivized and non-Incentivized Property Clases") %>% 
  set_header_labels(keypin = 'Project ID', count = 'PINs per \nProject', sum = 'PINs with \nIncentives', pct_pins_w_inct = 'Pct of PINs \nIncentivized', av = 'Project AV  \n(Final)'
                    )  %>% set_table_properties( layout = "autofit", width = .75)


```

## Summed by Project Identifier

```{r}
#| label: tbl-projectIDs
#| tbl-cap: "Summed to the Project Level. Note: We still do not have a true keypin-pin crosswalk so these numbers are very likely to change once the makeshift crosswalk is replaced"
#| column: page

table <- nonres_pins2022 %>% 
      filter(Alea_cat != "Land") %>%

  mutate(has_incentive = ifelse(class >= 600, 1, 0)) %>%
  group_by(keypin) %>%
  mutate(project_taxable_av = sum(av)) %>%
  ungroup() %>%
  group_by(keypin) %>%
  summarize(count = n(), # number of pins in project
         sum = sum(has_incentive), # number of pins that had incentives
         av_incent = sum(if_else(incent_prop == "Incentive", av, 0)),
         av_nonincent = sum(ifelse(incent_prop == "Non-Incentive", av, 0))) %>%
  mutate(pct_pins_w_inct = round(sum/count, digits = 3), # pct of pins that had incentive property class
         av_incent_adjusted = av_incent * 2.5,
         EstMarketValue = av_incent_adjusted + av_nonincent,
         perc_incentivized = av_incent_adjusted / EstMarketValue) %>%  
  filter(av_incent > 0) %>%  
  arrange(desc(count)) 

  

# Other option for graphing the keypins with mixed property incentivization
# Using DT instead of flextable
datatable(table,
          rownames= FALSE,
          colnames = c('Project ID' = 'keypin', 'PINs per Project' = 'count', 
                       'PINs with\nIncent Class' = 'sum',
        '% Backed out AV w/ Incentives' = 'perc_incentivized',
                     
                       'Taxable AV in Incent Class' = 'av_incent', 'Taxable AV in non-Incent Class' = 'av_nonincent', '2.5*IncentAV' = 'av_incent_adjusted', 'Adj.Total Assessed Value' = 'EstMarketValue',  'Pct of PINs Incentivized' = 'pct_pins_w_inct' )) %>%
  formatPercentage( c('% Backed out AV w/ Incentives' , 'Pct of PINs Incentivized'), 
                   digits = 1) %>%
  formatCurrency(c('Taxable AV in Incent Class', '2.5*IncentAV', 'Taxable AV in non-Incent Class', 'Adj.Total Assessed Value'), digits = 0)


# flextable(table) %>% 
#   set_caption("Projects with at least some Incentivized PINs") %>% 
#   set_header_labels(keypin = 'Project ID', count = 'PINs per\nProject',  
#                     pct_pins_w_inct = 'Pct of PINs\nIncentivized', 
#                     Incentive = 'AV from Incentive\nProjects', 
#                     `non-Incentive` = 'AV from non-Incentive\nProjects'
#                     )  %>% set_table_properties( layout = "autofit", width = .75)


```

# Comparable Properties

```{r}
nonres_pins2022 %>% 
  group_by(clean_name, comparable_props) %>% 
  summarize(pincount = n(),
            projects = n_distinct(keypin),
           # incent_count = n(incent_prop == "Incentive"),
            )
```


