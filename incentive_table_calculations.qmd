---
title: "Summary Table Calcualtions - All stats"
format: 
  html:
    code-fold: true
    toc: true
    tbl-cap-location: margin
---

# Data Preparation

```{r setup, warning = FALSE, output = FALSE}

library(tidyverse)
library(DT)
library(flextable) # for exporting to word or PDF files. Kable does not do that

library(sf)

knitr::opts_chunk$set(warning = FALSE, message = FALSE)

set_flextable_defaults(theme_fun = theme_vanilla, 
                       padding = 2,
                       line_spacing = 1,
                       big.mark = ",",
                       )
# keypins <- read_csv("Output/all_keypins.csv")

options(DT.options = list())
```

```{r}
#| echo: true
#| code-fold: false

# all pins for 2022
ptax_pins <- read_csv("Output/Dont_Upload/0_joined_PIN_data_2022.csv") %>% 
  mutate(class = as.numeric(class)) %>%
    select(-c(propclass_1dig:av.y))

bor <- read_csv("Output/borappeals.csv") %>%
  mutate(project_appellant = paste(project_id, sep = "-", appellant))

# temporary work-around until we have full keypin list:
proj_xwalk <- read_csv("Output/all_keypins.csv")               
# all commercial valuation properties but made with very unreliable data from commercial valuation dataset. 

# combine project IDs to PINs:
ptax_pins <- ptax_pins %>% left_join(proj_xwalk)



#  create tc_muninames from helper file:
source("scripts/helper_tc_muninames_2022.R")
tc_muninames <- tc_muninames %>%  select(-year)

# add muni names by joining tax code info:
ptax_pins <- ptax_pins %>% 
  mutate(tax_code_num = as.character(tax_code_num)) %>%
  left_join(tc_muninames)



# original class_dict variables already in 0_joined data
# but I do want the new-ish variables I created to be brought in:
class_dict <- read_csv("./Necessary_Files/class_dict_expanded.csv") %>%
  select(class_code, comparable_props, Alea_cat, incent_prop)

ptax_pins <- ptax_pins %>% 
  left_join(class_dict, by =  c("class" = "class_code")) %>%
  mutate(clean_name = ifelse(is.na(clean_name), "Unincorporated", clean_name)) 


bor_pins <- bor %>% 
  group_by(pin) %>% 
  arrange(desc(tax_year)) %>%
  summarize(pin = first(pin),
            class_bor = list(unique(class)),
            appellant = first(appellant),
            project_id = first(project_id), 
            timesappealed = n() ) %>%
  mutate(proj_appeallant = paste(project_id, "-", appellant))

ptax_pins <- ptax_pins %>% left_join(bor_pins, by = "pin")

# now do it the other way and compare 
ptax_pins <- ptax_pins %>% 
  mutate( both_ids = project_id,
          both_ids = ifelse(is.na(both_ids), keypin, both_ids ),
          both_ids = ifelse(is.na(both_ids) & (class > 298 & class < 900), pin, both_ids))

```

# FMV

## Major Class Sums

<!--- Don't use tax_amount_exe for calculations below because it is the "naive" calculation of the current tax rate * exempt eav discussed in the exemptions research. --->

```{r}

eq2021 <- 3.0027
eq2022 <- 2.9237



commercial_classes <- c(401:435, 490, 491, 492, 496:499,
                        500:535,590, 591, 592, 597:599, 
                        700:799,
                        800:835, 891, 892, 897, 899)  

industrial_classes <- c(480:489,493, 
                        550:589, 593,
                        600:699,
                        850:890, 893
                        )

#nonres_pins2022 <- nonres_pins2022 %>% group_by(keypin) %>% mutate(proj_hasincentive = class)
ptax_pins <- ptax_pins %>% 
  mutate(class_group = str_sub(class, 1,1),
         class_group = case_when(
          (class_group == 5 & class %in% commercial_classes) ~ "5A",
          (class_group == 5 & class %in% industrial_classes) ~ "5B",
          (class_group == 8 & class %in% commercial_classes ) ~ "8A",
          (class_group == 8 & class %in% industrial_classes ) ~ "8B",
          TRUE ~ as.character(class_group))) %>%
  
  mutate(
    taxable_av = (final_tax_to_dist/(tax_code_rate/100))  / eq2022, # current value that taxing agencies can tax for their levies
    taxable_fmv = taxable_av / loa,

    #  taxable_av = ((final_tax_to_dist/(tax_code_rate/100)) - (all_exemptions + abatements) ) / eq2022,
    untaxable_value_eav = all_exemptions + abatements + (final_tax_to_tif/(tax_code_rate/100)),
    untaxable_value_av = untaxable_value_eav / eq2022,
    untaxable_value_fmv = untaxable_value_av / loa,
    
    exempt_eav= (all_exemptions + abatements),
    exempt_fmv = exempt_eav / eq2022 / loa, 
    
    fmv_inTIF = ifelse(in_tif==1, av/loa, 0),
    fmv_tif_increment = ifelse(final_tax_to_tif > 0, ((final_tax_to_tif / (tax_code_rate/100)) / eq2022 ) / loa, 0),
    

    ) %>%
  select(tax_code, class, pin, taxable_fmv, untaxable_value_fmv, fmv_inTIF, fmv_tif_increment, fmv, total_billed, final_tax_to_dist, final_tax_to_tif, tax_code_rate, eav, equalized_av, av, everything())

```

> Total Value should equal Current Taxable Value + non-Taxable Value where non-Taxable Value = Value in TIF Increment + Reduced Value from Policy Choices where Reduced Value = Tax Exempt Value from Homeowners exemptions or abatements + Reduced Value from lower levels of assessments due to incentive classifications.

### Cook County Total Value

> Numbers will be slightly different than Sankey graph due to using more accurate levels of assessment when calculating the Fair Market Value of properties. There is a typo in the sankey graphs: says 665 billion for cook county and it should be 605 billion. 



```{r}
#| label: tbl-cooktotals
#| tbl-cap: "Summed FMV of PINs in Cook County by Property Class."

table_cook <- ptax_pins %>%
  summarize(cty_proptype_PC = n(),
            cty_projects = n_distinct(both_ids), # mostly for industrial and commercial properties
            fmv_incentive = sum(ifelse(class >=600 & class <=900, fmv, 0), na.rm = TRUE),
            fmv_taxable = sum(taxable_fmv, na.rm=TRUE),
            fmv_incents_inTIFs = sum(ifelse(class >=600 & class <=900 & in_tif == 1, fmv, 0), na.rm = TRUE),
            fmv_inTIF = sum(fmv_inTIF, na.rm=TRUE),
            fmv_tif_increment = sum(fmv_tif_increment, na.rm=TRUE),
            fmv_untaxable_value = sum(untaxable_value_fmv , na.rm=TRUE),
            fmv = sum(fmv, na.rm=TRUE),
            fmv_exemptions = sum(all_exemptions/eq2022/loa, na.rm=TRUE),
            fmv_abatements = sum(abatements/eq2022/loa, na.rm=TRUE),
            cty_zero_bill = sum(zero_bill, na.rm=TRUE),
) %>%
  mutate(pct_fmv_untaxable = fmv_untaxable_value / fmv)

table_cook %>% 
  select(cty_proptype_PC, fmv_taxable, fmv_untaxable_value, fmv ) %>%
  flextable() %>% 
  set_header_labels(cty_proptype_PC = 'PINs', cty_projects = "Project IDs", 
                    fmv = 'Total FMV', 
                    fmv_taxable = 'Taxable FMV', fmv_untaxable_value = 'Value not Taxable for Levy', 
                  #  fmv_incentive = "FMV with Incent.Class.", 
                  #  fmv_inTIF = 'FMV in TIFs', fmv_tif_increment = 'TIF Increment FMV' , 
                  #  incents_inTIFs = 'FMV with Incent. Class. in TIFs',
                    pct_fmv_untaxable = 'Value not Taxed (%)'
                  #  fmv_incentive = 'FMV with Incent. Classification'  
                  ) %>% 
  set_table_properties(layout = "fixed", width = 1, align = "r")
  
table_cook %>% 
  select(fmv, fmv_tif_increment, fmv_exemptions, fmv_abatements, fmv_incents_inTIFs, fmv_incentive, pct_fmv_untaxable, ) %>%
  flextable() %>% 
  set_header_labels(
                    fmv = 'Total FMV', 
                    fmv_untaxable_value = 'Value not Taxable for Levy',
                    fmv_tif_increment = 'TIF Increment FMV' ,
                    fmv_exemptions = 'Exempt Value: Exemptions',
                    fmv_abatements = 'Exempt Value: Abatements',
                    fmv_incents_inTIFs = 'FMV with Incent. Class. in TIFs',
                    pct_fmv_untaxable = 'Value not Taxed (%)',
                    fmv_incentive = "FMV with Incent.Class." 
)

table_cook %>% 
  select(fmv, fmv_inTIF, fmv_tif_increment, fmv_incentive, fmv_incents_inTIFs) %>%
  flextable() %>% 
  set_header_labels(
                    fmv = 'Total FMV', 
                    fmv_inTIF = 'FMV in TIFs',
                    fmv_tif_increment = 'TIF Increment FMV' ,
                    fmv_incentive = "FMV with Incent.Class.", 
                    fmv_incents_inTIFs = 'FMV with Incent. Class. in TIFs'
)

```

Taxable value is the frozen EAV within an area + taxable EAV for residential properties after exemptions and abatements (for non-residential properties) are subtracted from the equalized AV.

### Cook Total Value by Properties' Major Class

```{r}
#| label: tbl-cooktotals-majorclass
#| tbl-cap: "Summed FMV of PINs in Cook County by Property Class. Untaxable EAV includes homeowner exemptions for 200 level properties, abatements for other property class types, EAV in the TIF increment, and EAV that has been reduced due to incentive classifications"

table_MC <- ptax_pins %>%
  group_by(class_group) %>%
  summarize(proptype_pincount = n(),
          #  projects = n_distinct(both_ids), # mostly for industrial and commercial properties
            fmv_incentive = sum(ifelse(class >=600 & class <=900, fmv, 0), na.rm = TRUE),
            taxable_fmv = sum(taxable_fmv, na.rm=TRUE),
            incents_inTIFs = sum(ifelse(class >=600 & class <=900 & in_tif == 1, fmv, 0), na.rm = TRUE),
            fmv_inTIF = sum(fmv_inTIF, na.rm=TRUE),
            fmv_tif_increment = sum(fmv_tif_increment, na.rm=TRUE),
            untaxable_value = sum(untaxable_value_fmv , na.rm=TRUE),
            fmv = sum(fmv, na.rm=TRUE),

          #  zero_bill = sum(zero_bill, na.rm=TRUE),
            
) %>%
  mutate(pct_fmv_untaxable = untaxable_value / fmv)


flextable(table_MC) %>% 
  set_header_labels(class_group = "Property Type", proptype_pincount = 'PINs',# projects = "Project IDs", 
                    fmv = 'Total FMV', taxable_fmv = 'Taxable FMV', untaxable_value = 'Value not Taxable for Levy', fmv_incentive = "FMV with Incent.Class.", fmv_inTIF = 'FMV in TIFs', fmv_tif_increment = 'TIF Increment FMV' , pct_fmv_untaxable = 'Value not Taxed (%)', incentive_fmv = 'FMV with Incent. Classification', incents_inTIFs = 'FMV with Incent. Class. in TIFs' )
```

### Municipality Level Stats

```{r}
#| label: tbl-municlassgroup-totals
#| tbl-cap: "Major class types in Municipalities"


munilevel <- ptax_pins %>% 
  group_by(clean_name) %>%
  summarize(
    muni_proptype_pincount = n(),
             muni_projects = n_distinct(both_ids), # mostly for industrial and commercial properties
             muni_fmv_incentive = sum(ifelse(class >=600 & class <=900, fmv, 0), na.rm = TRUE),
             muni_taxable_fmv = sum(taxable_fmv, na.rm=TRUE),
             muni_pins_withincents = sum(ifelse(class >=600 & class <=900 & in_tif == 1, 1, 0), na.rm = TRUE),

             muni_incents_inTIFs = sum(ifelse(class >=600 & class <=900 & in_tif == 1, fmv, 0), na.rm = TRUE),
             muni_fmv_inTIF = sum(fmv_inTIF, na.rm=TRUE),
             muni_fmv_tif_increment = sum(fmv_tif_increment, na.rm=TRUE),
             muni_untaxable_value = sum(untaxable_value_fmv , na.rm=TRUE),
             muni_fmv = sum(fmv, na.rm=TRUE),
           muni_zero_bill = sum(zero_bill, na.rm=TRUE),
  ) %>%
  ungroup() %>%
  select(clean_name, starts_with("muni")) 

table_muni_mc <- ptax_pins %>% 
  group_by(clean_name, class_group) %>%
        summarize(proptype_pincount = n(),
            projects = n_distinct(both_ids), # mostly for industrial and commercial properties
            fmv_incentive = sum(ifelse(class >=600 & class <=900, fmv, 0), na.rm = TRUE),
            taxable_fmv = sum(taxable_fmv, na.rm=TRUE),
            pins_withincents = sum(ifelse(class >=600 & class <=900 & in_tif == 1, 1, 0), na.rm = TRUE),

            incents_inTIFs = sum(ifelse(class >=600 & class <=900 & in_tif == 1, fmv, 0), na.rm = TRUE),
            fmv_inTIF = sum(fmv_inTIF, na.rm=TRUE),
            fmv_tif_increment = sum(fmv_tif_increment, na.rm=TRUE),
            untaxable_value = sum(untaxable_value_fmv , na.rm=TRUE),
            fmv = sum(fmv, na.rm=TRUE),
            zero_bill = sum(zero_bill, na.rm=TRUE),
) %>%
  left_join(munilevel) %>%
  mutate(pct_fmv_untaxable = untaxable_value / muni_fmv,
         pct_incents = fmv_incentive / muni_fmv)
  
table_muni_mc %>% 
  select(-c(starts_with("muni"))) %>%
# %>%
#    select(clean_name, class_group, projects, proptype_pincount, fmv, taxable_fmv, untaxable_value, pct_fmv_untaxable, fmv_tif_increment, fmv_inTIF, fmv_incentive, incents_inTIFs, everything() )


#table_mctotals %>% 
  datatable(rownames = FALSE,
         colnames = c('Municipality' = 'clean_name', 'Major Class' = 'class_group', 
                      'Projects' = 'projects', 'PINs per Project' = 'proptype_pincount', 
        'PINs w Incent. Class.' = 'pins_withincents',
        'FMV w/ Incent. Class. (%)' = 'pct_incents',
        
       'Class FMV' = 'fmv', 'Taxable FMV' = 'taxable_fmv',  
       'Value not Taxable for Levy' = 'untaxable_value' , 'FMV with Incent.Class.' = 'fmv_incentive',  
       'FMV in TIFs' = 'fmv_inTIF',  'TIF Increment FMV' = 'fmv_tif_increment', 
       'Value not Taxed (%)' = 'pct_fmv_untaxable' , 'FMV with Incent. Class. in TIFs' = 'incents_inTIFs'#,
      # 'Muni FMV' = 'muni_fmv'
        
   )) %>%
  formatPercentage( c(  'Value not Taxed (%)', 'FMV w/ Incent. Class. (%)' ), digits = 1) %>%
  formatCurrency(c('Class FMV', 'Taxable FMV', 'Value not Taxable for Levy', 'TIF Increment FMV', 'FMV with Incent.Class.', 'FMV with Incent. Class. in TIFs', 'FMV in TIFs' ), digits = 0)

```

```{r}
table_mc_percentages <- table_muni_mc %>%
  mutate(pct_proptype_pincount = proptype_pincount/muni_proptype_pincount,
         pct_projects = projects / muni_projects,
         pct_fmv_incentive = fmv_incentive / muni_fmv_incentive,
         pct_fmv_taxable = taxable_fmv / muni_taxable_fmv,
         pct_pins_withincents = pins_withincents / muni_pins_withincents,
         pct_incents_inTIF = incents_inTIFs / muni_incents_inTIFs,
         pct_fmv_inTIF = fmv_inTIF / muni_fmv_inTIF,
         pct_fmv_tif_increment = fmv_tif_increment / muni_fmv_tif_increment,
         pct_untaxable_value = untaxable_value / muni_untaxable_value,
         pct_fmv = fmv / muni_fmv,
         pct_zero_bill = zero_bill / muni_zero_bill
         ) %>%
  select(clean_name, class_group, starts_with("pct"))

table_mc_percentages %>% 
  datatable(rownames = FALSE) %>%
  formatPercentage(columns = 3:15, digits = 2)
```

# Land Type Sums

## Cook Totals by Property Type

```{r}
#| label: tbl-cooktotals-somehowdifferent
#| tbl-cap: "Summed FMV of PINs in Cook County by Property Type `Alea_cat`"

table_proptype <- ptax_pins %>% 
  group_by(Alea_cat) %>%
    summarize(proptype_pincount = n(),
          #  projects = n_distinct(both_ids), # mostly for industrial and commercial properties
            fmv_incentive = sum(ifelse(class >=600 & class <=900, fmv, 0), na.rm = TRUE),
            taxable_fmv = sum(taxable_fmv, na.rm=TRUE),
            incents_inTIFs = sum(ifelse(class >=600 & class <=900 & in_tif == 1, fmv, 0), na.rm = TRUE),
            fmv_inTIF = sum(fmv_inTIF, na.rm=TRUE),
            fmv_tif_increment = sum(fmv_tif_increment, na.rm=TRUE),
            untaxable_value = sum(untaxable_value_fmv , na.rm=TRUE),
            fmv = sum(fmv, na.rm=TRUE),

          #  zero_bill = sum(zero_bill, na.rm=TRUE),
            
) %>%
  mutate(pct_fmv_untaxable = untaxable_value / fmv) %>%
   select(Alea_cat, proptype_pincount, fmv, taxable_fmv, untaxable_value, pct_fmv_untaxable, fmv_tif_increment, fmv_inTIF, fmv_incentive, incents_inTIFs, everything() )


flextable(table_proptype) %>% 
  set_header_labels(Alea_cat = "Property Type", proptype_pincount = 'PINs',# projects = "Project IDs", 
                    fmv = 'Total FMV', taxable_fmv = 'Taxable FMV', untaxable_value = 'Value not Taxable for Levy', fmv_incentive = "FMV with Incent.Class.", fmv_inTIF = 'FMV in TIFs', fmv_tif_increment = 'TIF Increment FMV' , pct_fmv_untaxable = 'Value not Taxed (%)', incentive_fmv = 'FMV with Incent. Classification', incents_inTIFs = 'FMV with Incent. Class. in TIFs' )

```

```{r}
#| label: tbl-cooktotals-allAleacats
#| tbl-cap: "Commercial and Industrial PINs in Cook County. Includes all **non-residential** property (i.e. property classes 0-399 are excluded."

nonres_pins2022 <- ptax_pins %>% 
  group_by(both_ids) %>%
  arrange(keypin, class) %>%
  mutate(min_class = first(class),
         max_class = last(class)) %>% 
  filter(max_class > 399 & max_class < 900) %>%
  ungroup()


#nonres_pins2022 <- nonres_pins2022 %>% group_by(keypin) %>% mutate(proj_hasincentive = class)
table <- nonres_pins2022 %>% 
  group_by(Alea_cat) %>%
  
      summarize(proptype_pincount = n(),
          #  projects = n_distinct(both_ids), # mostly for industrial and commercial properties
            fmv_incentive = sum(ifelse(class >=600 & class <=900, fmv, 0), na.rm = TRUE),
            taxable_fmv = sum(taxable_fmv, na.rm=TRUE),
            incents_inTIFs = sum(ifelse(class >=600 & class <=900 & in_tif == 1, fmv, 0), na.rm = TRUE),
            fmv_inTIF = sum(fmv_inTIF, na.rm=TRUE),
            fmv_tif_increment = sum(fmv_tif_increment, na.rm=TRUE),
            untaxable_value = sum(untaxable_value_fmv , na.rm=TRUE),
            fmv = sum(fmv, na.rm=TRUE),

          zero_bill = sum(zero_bill, na.rm=TRUE),
            
) %>%
  mutate(pct_fmv_untaxable = untaxable_value / fmv,
         pct_incents = fmv_incentive / fmv) %>%
   select(Alea_cat, proptype_pincount, fmv, taxable_fmv, untaxable_value, pct_fmv_untaxable, fmv_tif_increment, fmv_inTIF, fmv_incentive, incents_inTIFs, everything() )


flextable(table) %>% 
  set_header_labels(Alea_cat = "Property Type", proptype_pincount = 'PINs',# projects = "Project IDs", 
                    fmv = 'Total FMV', taxable_fmv = 'Taxable FMV', untaxable_value = 'Value not Taxable for Levy', fmv_incentive = "FMV with Incent.Class.", fmv_inTIF = 'FMV in TIFs', fmv_tif_increment = 'TIF Increment FMV' , pct_fmv_untaxable = 'Value not Taxed', incentive_fmv = 'FMV with Incent. Classification', incents_inTIFs = 'FMV with Incent. Class. in TIFs', pct_incents = 'FMV with Incent. Class' )



```

```{r}
#| label: tbl-incentiveproject-cooktotals
#| tbl-cap: "Commercial and Industrial Incentive Projects & PINs in Cook County. Includes property classes 500-899 and 100 level land PINs **if they are associated with a project id that has at least one incentive PIN.**"



incentive_pins2022 <- ptax_pins %>% 
  group_by(both_ids) %>%
  arrange(both_ids, class) %>%
  mutate(min_class = first(class),
         max_class = last(class)) %>% 
  filter(max_class > 499) %>%
  ungroup()

table <- incentive_pins2022 %>% 
  group_by(Alea_cat) %>%
  
        summarize(proptype_pincount = n(),
            projects = n_distinct(both_ids), # mostly for industrial and commercial properties
            fmv_incentive = sum(ifelse(class >=600 & class <=900, fmv, 0), na.rm = TRUE),
            taxable_fmv = sum(taxable_fmv, na.rm=TRUE),
            incents_inTIFs = sum(ifelse(class >=600 & class <=900 & in_tif == 1, fmv, 0), na.rm = TRUE),
            fmv_inTIF = sum(fmv_inTIF, na.rm=TRUE),
            fmv_tif_increment = sum(fmv_tif_increment, na.rm=TRUE),
            untaxable_value = sum(untaxable_value_fmv , na.rm=TRUE),
            fmv = sum(fmv, na.rm=TRUE),

          zero_bill = sum(zero_bill, na.rm=TRUE),
            
) %>%
  mutate(pct_fmv_untaxable = untaxable_value / fmv,
         pct_incents = fmv_incentive / fmv) %>%
   select(Alea_cat, projects, proptype_pincount, fmv, taxable_fmv, untaxable_value, pct_fmv_untaxable, fmv_tif_increment, fmv_inTIF, fmv_incentive, incents_inTIFs, everything() )


flextable(table) %>% 
  set_header_labels(Alea_cat = "Property Type", proptype_pincount = 'PINs', projects = "Project IDs", 
                    fmv = 'Total FMV', taxable_fmv = 'Taxable FMV', untaxable_value = 'Value not Taxable for Levy', fmv_incentive = "FMV with Incent.Class.", fmv_inTIF = 'FMV in TIFs', fmv_tif_increment = 'TIF Increment FMV' , pct_fmv_untaxable = 'Value not Taxed', incentive_fmv = 'FMV with Incent. Classification', incents_inTIFs = 'FMV with Incent. Class. in TIFs', pct_incents = 'FMV with Incent. Class' )


```

```{r eval=FALSE}
#| label: tbl-projectsinMunis
#| tbl-cap: "Commercial and Industrial properties only. Grouped by Property Type within Municipality. FMV is calculated from AV / LOA."


table1 <- nonres_pins2022 %>% 
  filter(Alea_cat %in% c("Industrial", "Commercial"))  %>%
  group_by(clean_name, Alea_cat) %>% 
          summarize(proptype_pincount = n(),
            projects = n_distinct(both_ids), # mostly for industrial and commercial properties
            fmv_incentive = sum(ifelse(class >=600 & class <=900, fmv, 0), na.rm = TRUE),
            taxable_fmv = sum(taxable_fmv, na.rm=TRUE),
            incents_inTIFs = sum(ifelse(class >=600 & class <=900 & in_tif == 1, fmv, 0), na.rm = TRUE),
            fmv_inTIF = sum(fmv_inTIF, na.rm=TRUE),
            fmv_tif_increment = sum(fmv_tif_increment, na.rm=TRUE),
            untaxable_value = sum(untaxable_value_fmv , na.rm=TRUE),
            fmv = sum(fmv, na.rm=TRUE),
            av = sum(av, na.rm=TRUE),

          zero_bill = sum(zero_bill, na.rm=TRUE),
            
) %>%
  mutate(pct_fmv_untaxable = untaxable_value / fmv,
         pct_incents = fmv_incentive / fmv,
         pct_inTIF = fmv_inTIF / fmv) %>%
   select(Alea_cat, projects, proptype_pincount, fmv, av,
        # taxable_fmv, untaxable_value, 
         pct_fmv_untaxable, pct_incents, pct_inTIF 
        #fmv_tif_increment, fmv_inTIF, fmv_incentive, incents_inTIFs, everything() 
        )

datatable(table1,
          rownames= FALSE,
          colnames = c('Municipality' = 'clean_name',   'Property Type' = 'Alea_cat', 'PIN Count' = 'proptype_pincount', 'Project Count' = 'projects', 'Current Taxable AV' = 'av', 'FMV' = 'fmv',
       'FMV Untaxed (%)'  = 'pct_fmv_untaxable', 'FMV with Incent. Class. (%)' =  'pct_incents', 'FMV in TIF (%)' = 'pct_inTIF'),
       #   extensions = 'RowGroup',
          options = list(rowGroup = list(dataSrc = 0))) %>%
  formatCurrency(c('Current Taxable AV', 'FMV'), digits = 0) %>%
  formatPercentage(c('FMV Untaxed (%)', 'FMV with Incent. Class. (%)', 'FMV in TIF (%)'), digits = 3)
```

## Municipality level summaries for property types

### Muni level map - Share of commercial and industrial value that has incentive classification

```{r}
#| label: tbl-amount-incentivized
#| tbl-cap: "Percent of Commercial and Industrial \"Market Value for Assessment Purposes\" that has a reduced assessment rate due to incentive classification"


table2 <- nonres_pins2022 %>% 
    filter(Alea_cat != "Land") %>%
  group_by(clean_name) %>%  
  summarize(pin_count = n(),
          project_count = n_distinct(both_ids), 
          fmv = sum(av / loa, na.rm=TRUE), 
          fmv_incent = sum(ifelse(between(class, 600, 899), av/loa, 0), na.rm=TRUE),

          av_incent = sum(ifelse(between(class, 600, 899), (av/loa)*0.25, 0), na.rm=TRUE),
          av_adjusted = sum(ifelse(between(class, 600, 899), (av/loa)*0.25, av), na.rm=TRUE), # AV if level of assessment was 25% for everyone
         fmv = sum(av/loa, na.rm=TRUE),
         av = sum(av, na.rm=TRUE)) %>%
  mutate(pct_av_incent = av_incent / av_adjusted,
         pct_fmv_incent = fmv_incent/fmv)  %>%
  select(-c(av_incent, fmv_incent))

datatable(table2,
          rownames= FALSE,
          colnames = c('Municipality' = 'clean_name', #  'Incentivized?' = 'incent_prop', 
                       'PIN Count' = 'pin_count', 'Projects' = 'project_count', 
                       'Current AV' = 'av',
                       'FMV' = 'fmv',
                     #  'FMV with Incent.Class.' = 'fmv_incent',
                      # 'AV with Incent.Class.' = 'av_incent',
                       'AV if 25% LOA' = 'av_adjusted', 
                       'AV Incentivized (%)' = 'pct_av_incent',
                       'FMV Incentivized (%)' = 'pct_fmv_incent'
                       )
          ) %>%
  formatCurrency(c('Current AV', 'FMV', 'AV if 25% LOA'), digits = 0) %>%
  formatPercentage(c( 'AV Incentivized (%)',
                       'FMV Incentivized (%)'), digits = 2)
```

```{r}
#| label: fig-pctincentivevalue
#| fig-cap: "Percent of Commercial and Industrial Market Value (for Assessment Purposes) that has Incentive Classification." 


muni_shp <- read_sf("https://gis.cookcountyil.gov/traditional/rest/services/politicalBoundary/MapServer/2/query?outFields=*&where=1%3D1&f=geojson")

table2 %>% 
  left_join(nicknames, by = "clean_name") %>%
  left_join(muni_shp, by = c("shpfile_name" = "MUNICIPALITY")) %>%
  
  ggplot(aes(fill = pct_fmv_incent)) +
  geom_sf(aes(geometry = geometry), color = "black") +
  theme_void() + 
  theme(axis.ticks = element_blank(), axis.text = element_blank())+
  scale_fill_steps2(
    high = "#420420", low = "black",
    # midpoint = median(transfered_taxes),
    show.limits=TRUE,
    nice.breaks=FALSE,
    na.value="gray",
    n =4,
    name = "Market Value (%)",
    labels = scales::percent
  )
```


# Tax Rates

```{r}
ccao_loa <- read_csv("./inputs/ccao_loa.csv") %>% 
  filter(year== 2022) %>% 
  select(-year)

MuniLevel <- read_csv("./Output/ptaxsim_muni_level_2006-2022.csv") %>%
  filter(year == 2022) %>%
  left_join(nicknames) %>% 
  select(clean_name, cur_comp_muni_rate) %>%
  rename(cur_munilevel_rate = cur_comp_muni_rate)


# MC_sums <- read_csv("./Output/ptaxsim_muni_MC_2006-2022.csv") %>% 
#   filter(year == 2022) %>% 
#   left_join(nicknames) 
# 
# tc_class <- read_csv("./Output/ptaxsim_TC_Class_summaries_2006-2022.csv") %>% 
#   filter(year == 2022)
# 
# muni_class_sums <- read_csv("./Output/ptaxsim_muni_class_summaries_2006-2022.csv") %>%
#     mutate(class_group = str_sub(class, 1,1),
#          class_group = case_when(
#           (class_group == 5 & class %in% commercial_classes) ~ "5A",
#           (class_group == 5 & class %in% industrial_classes) ~ "5B",
#           (class_group == 8 & class %in% commercial_classes ) ~ "8A",
#           (class_group == 8 & class %in% industrial_classes ) ~ "8B",
#           TRUE ~ as.character(class_group)))

eqfact22 <- 2.9237 # 2022 CC equalization factor
eqfact21 <- 3.0027 # 2021 CC Equalization Factor

muni_class2022 <- read_csv("./Output/ptaxsim_muni_class_summaries_2006-2022.csv") %>% 
  filter(year == 2022) %>% 
  filter(clean_name != c("Frankfort"))%>%
  left_join(class_dict, by = c("class" = "class_code")) %>%
  left_join(ccao_loa, by = c("class" = "class_code")) %>%
    mutate(class_group = str_sub(class, 1,1),
         class_group = case_when(
          (class_group == 5 & class %in% commercial_classes) ~ "5A",
          (class_group == 5 & class %in% industrial_classes) ~ "5B",
          (class_group == 8 & class %in% commercial_classes ) ~ "8A",
          (class_group == 8 & class %in% industrial_classes ) ~ "8B",
          TRUE ~ as.character(class_group)))


muni_class_AleaCats <- muni_class2022 %>%
  left_join(MuniLevel) %>%
  group_by(clean_name, class_group, incent_prop, Alea_cat, cur_munilevel_rate) %>%
  summarize(av = sum(av),
            eav = sum(eav), # equalized AV 
            fmv = sum(av / loa, na.rm=TRUE),
            final_tax_to_dist = sum(final_tax_to_dist), # revenue collected by taxing districts
            final_tax_to_tif = sum(final_tax_to_tif),   # revenue collected from TIF increment
            current_taxable_eav = sum(current_taxable_eav), 
            pins_in_muni = n(),
            all_exemptions = sum(all_exemptions),
            abatements = sum(exe_abate),
            loa = mean(loa, na.rm=TRUE)
  ) %>%
  mutate(
    # approximation for if assessments went from 10% to 25%, similar to other commercial and industrial property in Cook County
    new_av = ifelse(incent_prop == "Incentive", av/loa, av), 
    
    new_TEAV_noIncents = ifelse(incent_prop ==  "Incentive", current_taxable_eav/eq2022/loa, current_taxable_eav),
    new_TEAV_noC6 = ifelse(class_group == "6", (current_taxable_eav/eq2022)/loa , current_taxable_eav),
    new_TEAV_noC7 = ifelse(class_group == "7", (current_taxable_eav/eq2022)/loa , current_taxable_eav),
    new_TEAV_noC8 = ifelse(class_group == "8", (current_taxable_eav/eq2022)/loa, current_taxable_eav),
    
    new_TEAV_vacant_noIncents = ifelse(incent_prop ==  "Incentive", 0, current_taxable_eav),
    
    new_TEAV_noExemps = current_taxable_eav + all_exemptions, # does not include abatements
    new_TEAV_noAbates = current_taxable_eav + abatements, # include only abatements, not other exemption types

    # amount of EAV from taxing an additional 15% of the AV if incentive properties didn't exist
    forgone_EAV_incent = ifelse(incent_prop == "Incentive", new_TEAV_noIncents - (current_taxable_eav + all_exemptions), 0),
      forgone_EAV_noC6 = ifelse(class_group == "6", new_TEAV_noC6 - (current_taxable_eav + all_exemptions), 0),
          forgone_EAV_noC7 = ifelse(class_group == "7", new_TEAV_noC7 - (current_taxable_eav + all_exemptions), 0),
          forgone_EAV_noC8 = ifelse(class_group == "8", new_TEAV_noC8 - (current_taxable_eav + all_exemptions), 0),
    
    forgone_TIF_EAV = final_tax_to_tif / cur_munilevel_rate)     


alt_rates <- muni_class_AleaCats %>% 
  group_by(clean_name, cur_munilevel_rate) %>% 
  mutate(munilevy = sum(final_tax_to_dist),
         muni_exemptions = sum(all_exemptions), # all exe_ variables except exe_abate
         muni_abatements = sum(abatements),
         muni_forgoneTIF = sum(forgone_TIF_EAV, na.rm=TRUE),
         muni_forgone_EAV_incent = sum(forgone_EAV_incent, na.rm=TRUE),
         muni_forgone_EAV_noC6 = sum(forgone_EAV_noC6, na.rm=TRUE),
         muni_forgone_EAV_noC7 = sum(forgone_EAV_noC7, na.rm=TRUE),
         muni_forgone_EAV_noC8 = sum(forgone_EAV_noC8, na.rm=TRUE),
         muni_TEAV_noC6 = sum(new_TEAV_noC6, na.rm=TRUE),
         muni_TEAV_noC7 = sum(new_TEAV_noC7, na.rm=TRUE),
         muni_TEAV_noC8 = sum(new_TEAV_noC8, na.rm=TRUE),
         muni_current_TEAV = sum(current_taxable_eav),
         muni_TEAV_noExe = sum(new_TEAV_noExemps),
         muni_TEAV_noAbate= sum(new_TEAV_noAbates),
         muni_TEAV_noInc = sum(new_TEAV_noIncents),
         muni_TEAV_vacant_noInc = sum(new_TEAV_vacant_noIncents, na.rm = TRUE),
        
                                      
         
         ) %>%
  ungroup() %>%
  mutate(
    # Absolute maximum TEAV: No Exemptions, no abatements, no TIFS, no Incentive properties
    # Commercial and industrial assessed at 25%
    muni_TEAV_max = muni_current_TEAV + muni_exemptions + muni_abatements + muni_forgoneTIF + muni_forgone_EAV_incent,
    
    muni_TEAV_neither = muni_current_TEAV + muni_exemptions + muni_forgone_EAV_incent,
    
    muni_rate_noExe = munilevy / muni_TEAV_noExe * 100,
    muni_rate_noAbate = munilevy / muni_TEAV_noAbate * 100,
    muni_rate_noInc = munilevy / muni_TEAV_noInc * 100,
    muni_rate_neither = munilevy / muni_TEAV_neither * 100, 
    muni_rate_noTIFs = munilevy / (muni_current_TEAV + muni_forgoneTIF) * 100,
    muni_rate_vacant = munilevy / muni_TEAV_vacant_noInc* 100,
    muni_rate_lowest = munilevy / muni_TEAV_max * 100,
    muni_rate_noC6 = munilevy / (muni_TEAV_noC6) * 100,
    muni_rate_noC7 = munilevy / (muni_TEAV_noC7) * 100,
    muni_rate_noC8 = munilevy / ( muni_TEAV_noC8) * 100
     
    )

alt_rates <- alt_rates %>% 
  mutate(change_noExe = cur_munilevel_rate - muni_rate_noExe,
         change_noInc = cur_munilevel_rate - muni_rate_noInc,
         change_noC6 = cur_munilevel_rate - muni_rate_noC6,
         change_noC7 = cur_munilevel_rate - muni_rate_noC7,
         change_noC8 = cur_munilevel_rate - muni_rate_noC8,

         change_noTIFs = cur_munilevel_rate - muni_rate_noTIFs,
         change_neither = cur_munilevel_rate - muni_rate_neither,
         change_max = cur_munilevel_rate - muni_rate_lowest,
         change_noAbate = cur_munilevel_rate - muni_rate_noAbate,
         change_vacants = cur_munilevel_rate - muni_rate_vacant) # highest rate scenario
```


> Change calculations for incentives do not seem correct!!


```{r}
tbl1 <- alt_rates %>% 
  select(clean_name, cur_munilevel_rate, muni_rate_noExe, muni_rate_noInc, muni_rate_neither,  muni_rate_noTIFs, muni_rate_noAbate,
                             muni_rate_lowest, muni_rate_vacant) %>% 
  distinct() %>% 
  mutate(across(cur_munilevel_rate:muni_rate_vacant, round, digits = 2)) %>% 
  as.data.frame()

#tbl1

datatable(tbl1,
          rownames= FALSE,
          colnames = c('Municipality' = 'clean_name',   'Current Composite Rate' = 'cur_munilevel_rate', 'Rate if No Exemptions' = 'muni_rate_noExe', 'Rate if No Incentive Classes' = 'muni_rate_noInc', 'Rate if No Inc. or Exe.' = 'muni_rate_neither', 'Lowest Rate Possible' = 'muni_rate_lowest'))      

tbl2 <- alt_rates %>% 
  select(clean_name, change_noExe, change_noInc, change_noAbate, change_noTIFs, change_neither, change_max, change_vacants) %>%
  distinct() %>%
  mutate(across(change_noExe:change_vacants, round, digits = 2)) %>% as.data.frame()


datatable(tbl2,
          rownames= FALSE,
          colnames = c('Municipality' = 'clean_name',   
                       'Rate Change from Taxing GHE Exempt EAV' = 'change_noExe', 
                       'Rate Change: No Abatements' = 'change_noAbate',
                       'Rate Change from Additional Commerc & Indust. Value' = 'change_noInc', 
                       'Rate Change: Incent. Prop. Lose All Value' = 'change_vacants',
                       'Rate if No Incentive Classes & No Exemptions' = 'change_neither',
                       'Rate if No TIF Increments' = 'change_noTIFs',
                       'Maxiumum Rate Change' = 'change_max'
                       
                    ))


tbl3 <- alt_rates %>% 
  select(clean_name, change_noExe, change_noInc, change_noC6, change_noC7, change_noC8, change_noAbate, change_noTIFs, 
         change_neither, change_max, change_vacants) %>%
  distinct() %>%
  mutate(across(change_noExe:change_vacants, round, digits = 2)) %>% as.data.frame()

datatable(tbl3,
          rownames= FALSE,
          colnames = c('Municipality' = 'clean_name',   
                       'Rate Change from Taxing GHE Exempt EAV' = 'change_noExe', 
                       'Rate Change: No Abatements' = 'change_noAbate',
                       'Rate Change from Additional Commerc & Indust. Value' = 'change_noInc', 
                       'Rate Change: Incent. Prop. Lose All Value' = 'change_vacants',
                       'Rate Change: No C6 AV Reduction' = 'change_noC6',
                       'Rate Change: No C7 AV Reduction' = 'change_noC7',
                       'Rate Change: No C8 AV Reduction' = 'change_noC8',

                       'Rate if No Incentive Classes & No Exemptions' = 'change_neither',
                       'Rate if No TIF Increments' = 'change_noTIFs',
                       'Maxiumum Rate Change' = 'change_max'
                       
                    ))
```

# Alternative Calculations

## Assessed Value (AV) Tables

## Incentive and non-Incentive, Commercial and Industrial Properties

```{r eval = FALSE}
#| label: tbl-propertybreakdown
#| tbl-cap: "Breakdown of incentivized properties within commercial and industrial properties"

table <- nonres_pins2022 %>% 
      filter(Alea_cat != "Land") %>%

  group_by(clean_name, incent_prop, Alea_cat) %>%   # projects can be counted twice if the project has incentive and normal commercial/industrial prop classes.
  summarize(pin_count = n(),
         project_count = n_distinct(keypin),
         projects_bor = n_distinct(both_ids),
         av_adjusted = sum(ifelse(between(class, 600, 899), av*2.5, av)),
         av_incent = sum(ifelse(between(class, 600, 899), av*2.5, 0)),
         av=sum(av),
)  %>%
  mutate(#AV_incent = av_adjusted - av,
           pct_incent = av_incent / av_adjusted)


datatable(table,
          rownames= FALSE,
          colnames = c('Municipality' = 'clean_name', 'Incentivized?' = 'incent_prop',
                       'Property Type' = 'Alea_cat', 'PINs in Projects' = 'pin_count', 
                       'Project Count' = 'project_count',
                       'Current Taxable AV' = 'av',
                       'Total Assessed Market Value' = 'av_adjusted',
      'Assessed Market Value' = 'av_incent', 
      '% AV Incentivized' = 'pct_incent' )  ) %>%
  formatCurrency(c('Current Taxable AV', 'Assessed Market Value'), digits = 0) %>%
formatPercentage('% AV Incentivized', digits = 2)
```

# Comparable Properties

```{r}
#|
nonres_pins2022 %>% 
  group_by(clean_name, comparable_props) %>% 
  summarize(pincount = n(),
            projects = n_distinct(both_ids),
            ) 
```
